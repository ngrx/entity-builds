{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../src/state_adapter.ts","../src/utils.ts","../src/unsorted_state_adapter.ts","../src/sorted_state_adapter.ts","../src/models.ts","../src/create_adapter.ts","../src/entity_state.ts","../src/state_selectors.ts"],"names":["Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","DidMutate","EntitiesOnly","Both","None","createStateOperator","mutator","arg","state","clonedEntityState","ids","entities","assign","didMutate","selectIdValue","entity","selectId","key","isDevMode","undefined","console","warn","toString","createUnsortedStateAdapter","addOneMutably","addManyMutably","entities_1","entities_1_1","removeManyMutably","keysOrPredicate","Array","filter","map","id","updateOneMutably","update","updateManyMutably","updates","newKeys","keys","original","updated","changes","newKey","hasNewKey","takeNewKey","upsertManyMutably","added","entities_2","entities_2_1","didMutateByUpdated","didMutateByAdded","removeAll","addOne","addMany","setAll","setOne","updateOne","updateMany","upsertOne","upsertMany","removeOne","removeMany","reduce","change","_a","mapOne","createSortedStateAdapter","sort","newModels","models","model","merge","didMutateIds","takeUpdatedModel","originalIds_1","updatedIndexes_1","index","every","j","modelId","entityId","slice","forEach","val","updatesOrMap","options","sortComparer","instance","stateFactory","getInitialState","additionalState","selectorsFactory","getSelectors","selectState","selectIds","selectEntities","selectAll","createSelector","selectTotal","stateAdapter"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { EntityState } from './models';\n\nexport enum DidMutate {\n  EntitiesOnly,\n  Both,\n  None,\n}\n\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => DidMutate\n): EntityState<V>;\nexport function createStateOperator<V, R>(\n  mutator: (arg: any, state: any) => DidMutate\n): any {\n  return function operation<S extends EntityState<V>>(arg: R, state: any): S {\n    const clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate === DidMutate.Both) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    if (didMutate === DidMutate.EntitiesOnly) {\n      return {\n        ...state,\n        entities: clonedEntityState.entities,\n      };\n    }\n\n    return state;\n  };\n}\n","import { isDevMode } from '@angular/core';\nimport { IdSelector } from './models';\n\nexport function selectIdValue<T>(entity: T, selectId: IdSelector<T>) {\n  const key = selectId(entity);\n\n  if (isDevMode() && key === undefined) {\n    console.warn(\n      '@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.',\n      'You should probably provide your own `selectId` implementation.',\n      'The entity that was passed:',\n      entity,\n      'The `selectId` implementation:',\n      selectId.toString()\n    );\n  }\n\n  return key;\n}\n","import {\n  EntityState,\n  EntityStateAdapter,\n  IdSelector,\n  Update,\n  Predicate,\n  EntityMap,\n  EntityMapOneNum,\n  EntityMapOneStr,\n} from './models';\nimport { createStateOperator, DidMutate } from './state_adapter';\nimport { selectIdValue } from './utils';\n\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T>;\nexport function createUnsortedStateAdapter<T>(selectId: IdSelector<T>): any {\n  type R = EntityState<T>;\n\n  function addOneMutably(entity: T, state: R): DidMutate;\n  function addOneMutably(entity: any, state: any): DidMutate {\n    const key = selectIdValue(entity, selectId);\n\n    if (key in state.entities) {\n      return DidMutate.None;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return DidMutate.Both;\n  }\n\n  function addManyMutably(entities: T[], state: R): DidMutate;\n  function addManyMutably(entities: any[], state: any): DidMutate {\n    let didMutate = false;\n\n    for (const entity of entities) {\n      didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n\n  function setAllMutably(entities: T[], state: R): DidMutate;\n  function setAllMutably(entities: any[], state: any): DidMutate {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n\n    return DidMutate.Both;\n  }\n\n  function setOneMutably(entity: T, state: R): DidMutate;\n  function setOneMutably(entity: any, state: any): DidMutate {\n    const key = selectIdValue(entity, selectId);\n\n    if (key in state.entities) {\n      state.entities[key] = entity;\n      return DidMutate.EntitiesOnly;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return DidMutate.Both;\n  }\n\n  function removeOneMutably(key: T, state: R): DidMutate;\n  function removeOneMutably(key: any, state: any): DidMutate {\n    return removeManyMutably([key], state);\n  }\n\n  function removeManyMutably(keys: T[], state: R): DidMutate;\n  function removeManyMutably(predicate: Predicate<T>, state: R): DidMutate;\n  function removeManyMutably(\n    keysOrPredicate: any[] | Predicate<T>,\n    state: any\n  ): DidMutate {\n    const keys =\n      keysOrPredicate instanceof Array\n        ? keysOrPredicate\n        : state.ids.filter((key: any) => keysOrPredicate(state.entities[key]));\n\n    const didMutate =\n      keys\n        .filter((key: any) => key in state.entities)\n        .map((key: any) => delete state.entities[key]).length > 0;\n\n    if (didMutate) {\n      state.ids = state.ids.filter((id: any) => id in state.entities);\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n\n  function removeAll<S extends R>(state: S): S;\n  function removeAll<S extends R>(state: any): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n\n  function takeNewKey(\n    keys: { [id: string]: string },\n    update: Update<T>,\n    state: R\n  ): void;\n  function takeNewKey(\n    keys: { [id: string]: any },\n    update: Update<T>,\n    state: any\n  ): boolean {\n    const original = state.entities[update.id];\n    const updated: T = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n    const hasNewKey = newKey !== update.id;\n\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n\n    return hasNewKey;\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate;\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state);\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const newKeys: { [id: string]: string } = {};\n\n    updates = updates.filter((update) => update.id in state.entities);\n\n    const didMutateEntities = updates.length > 0;\n\n    if (didMutateEntities) {\n      const didMutateIds =\n        updates.filter((update) => takeNewKey(newKeys, update, state)).length >\n        0;\n\n      if (didMutateIds) {\n        state.ids = state.ids.map((id: any) => newKeys[id] || id);\n        return DidMutate.Both;\n      } else {\n        return DidMutate.EntitiesOnly;\n      }\n    }\n\n    return DidMutate.None;\n  }\n\n  function mapMutably(map: EntityMap<T>, state: R): DidMutate;\n  function mapMutably(map: any, state: any): DidMutate {\n    const changes: Update<T>[] = state.ids.reduce(\n      (changes: any[], id: string | number) => {\n        const change = map(state.entities[id]);\n        if (change !== state.entities[id]) {\n          changes.push({ id, changes: change });\n        }\n        return changes;\n      },\n      []\n    );\n    const updates = changes.filter(({ id }) => id in state.entities);\n\n    return updateManyMutably(updates, state);\n  }\n\n  function mapOneMutably(map: EntityMapOneNum<T>, state: R): DidMutate;\n  function mapOneMutably(map: EntityMapOneStr<T>, state: R): DidMutate;\n  function mapOneMutably({ map, id }: any, state: any): DidMutate {\n    const entity = state.entities[id];\n    if (!entity) {\n      return DidMutate.None;\n    }\n\n    const updatedEntity = map(entity);\n    return updateOneMutably(\n      {\n        id: id,\n        changes: updatedEntity,\n      },\n      state\n    );\n  }\n\n  function upsertOneMutably(entity: T, state: R): DidMutate;\n  function upsertOneMutably(entity: any, state: any): DidMutate {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(entities: T[], state: R): DidMutate;\n  function upsertManyMutably(entities: any[], state: any): DidMutate {\n    const added: any[] = [];\n    const updated: any[] = [];\n\n    for (const entity of entities) {\n      const id = selectIdValue(entity, selectId);\n      if (id in state.entities) {\n        updated.push({ id, changes: entity });\n      } else {\n        added.push(entity);\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None &&\n        didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both ||\n        didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    setOne: createStateOperator(setOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n    map: createStateOperator(mapMutably),\n    mapOne: createStateOperator(mapOneMutably),\n  };\n}\n","import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  EntityStateAdapter,\n  Update,\n  EntityMap,\n  EntityMapOneNum,\n  EntityMapOneStr,\n} from './models';\nimport { createStateOperator, DidMutate } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\nimport { selectIdValue } from './utils';\n\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T>;\nexport function createSortedStateAdapter<T>(selectId: any, sort: any): any {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n\n  function addOneMutably(entity: T, state: R): DidMutate;\n  function addOneMutably(entity: any, state: any): DidMutate {\n    return addManyMutably([entity], state);\n  }\n\n  function addManyMutably(newModels: T[], state: R): DidMutate;\n  function addManyMutably(newModels: any[], state: any): DidMutate {\n    const models = newModels.filter(\n      (model) => !(selectIdValue(model, selectId) in state.entities)\n    );\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      merge(models, state);\n      return DidMutate.Both;\n    }\n  }\n\n  function setAllMutably(models: T[], state: R): DidMutate;\n  function setAllMutably(models: any[], state: any): DidMutate {\n    state.entities = {};\n    state.ids = [];\n\n    addManyMutably(models, state);\n\n    return DidMutate.Both;\n  }\n\n  function setOneMutably(entity: T, state: R): DidMutate;\n  function setOneMutably(entity: any, state: any): DidMutate {\n    const id = selectIdValue(entity, selectId);\n    if (id in state.entities) {\n      state.ids = state.ids.filter((val: string | number) => val !== id);\n      merge([entity], state);\n      return DidMutate.Both;\n    } else {\n      return addOneMutably(entity, state);\n    }\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate;\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state);\n  }\n\n  function takeUpdatedModel(models: T[], update: Update<T>, state: R): boolean;\n  function takeUpdatedModel(models: any[], update: any, state: any): boolean {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n\n    const original = state.entities[update.id];\n    const updated = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n\n    delete state.entities[update.id];\n\n    models.push(updated);\n\n    return newKey !== update.id;\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const models: T[] = [];\n\n    const didMutateIds =\n      updates.filter((update) => takeUpdatedModel(models, update, state))\n        .length > 0;\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      const originalIds = state.ids;\n      const updatedIndexes: any[] = [];\n      state.ids = state.ids.filter((id: any, index: number) => {\n        if (id in state.entities) {\n          return true;\n        } else {\n          updatedIndexes.push(index);\n          return false;\n        }\n      });\n\n      merge(models, state);\n\n      if (\n        !didMutateIds &&\n        updatedIndexes.every((i: number) => state.ids[i] === originalIds[i])\n      ) {\n        return DidMutate.EntitiesOnly;\n      } else {\n        return DidMutate.Both;\n      }\n    }\n  }\n\n  function mapMutably(map: EntityMap<T>, state: R): DidMutate;\n  function mapMutably(updatesOrMap: any, state: any): DidMutate {\n    const updates: Update<T>[] = state.ids.reduce(\n      (changes: any[], id: string | number) => {\n        const change = updatesOrMap(state.entities[id]);\n        if (change !== state.entities[id]) {\n          changes.push({ id, changes: change });\n        }\n        return changes;\n      },\n      []\n    );\n\n    return updateManyMutably(updates, state);\n  }\n\n  function mapOneMutably(map: EntityMapOneNum<T>, state: R): DidMutate;\n  function mapOneMutably(map: EntityMapOneStr<T>, state: R): DidMutate;\n  function mapOneMutably({ map, id }: any, state: any): DidMutate {\n    const entity = state.entities[id];\n    if (!entity) {\n      return DidMutate.None;\n    }\n\n    const updatedEntity = map(entity);\n    return updateOneMutably(\n      {\n        id: id,\n        changes: updatedEntity,\n      },\n      state\n    );\n  }\n\n  function upsertOneMutably(entity: T, state: R): DidMutate;\n  function upsertOneMutably(entity: any, state: any): DidMutate {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(entities: T[], state: R): DidMutate;\n  function upsertManyMutably(entities: any[], state: any): DidMutate {\n    const added: any[] = [];\n    const updated: any[] = [];\n\n    for (const entity of entities) {\n      const id = selectIdValue(entity, selectId);\n      if (id in state.entities) {\n        updated.push({ id, changes: entity });\n      } else {\n        added.push(entity);\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None &&\n        didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both ||\n        didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n\n  function merge(models: T[], state: R): void;\n  function merge(models: any[], state: any): void {\n    models.sort(sort);\n\n    const ids: any[] = [];\n\n    let i = 0;\n    let j = 0;\n\n    while (i < models.length && j < state.ids.length) {\n      const model = models[i];\n      const modelId = selectIdValue(model, selectId);\n      const entityId = state.ids[j];\n      const entity = state.entities[entityId];\n\n      if (sort(model, entity) <= 0) {\n        ids.push(modelId);\n        i++;\n      } else {\n        ids.push(entityId);\n        j++;\n      }\n    }\n\n    if (i < models.length) {\n      state.ids = ids.concat(models.slice(i).map(selectId));\n    } else {\n      state.ids = ids.concat(state.ids.slice(j));\n    }\n\n    models.forEach((model, i) => {\n      state.entities[selectId(model)] = model;\n    });\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setAll: createStateOperator(setAllMutably),\n    setOne: createStateOperator(setOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    map: createStateOperator(mapMutably),\n    mapOne: createStateOperator(mapOneMutably),\n  };\n}\n","export type Comparer<T> = (a: T, b: T) => number;\n\nexport type IdSelectorStr<T> = (model: T) => string;\nexport type IdSelectorNum<T> = (model: T) => number;\n\nexport type IdSelector<T> = IdSelectorStr<T> | IdSelectorNum<T>;\n\nexport interface DictionaryNum<T> {\n  [id: number]: T | undefined;\n}\n\nexport abstract class Dictionary<T> implements DictionaryNum<T> {\n  [id: string]: T | undefined;\n}\n\nexport interface UpdateStr<T> {\n  id: string;\n  changes: Partial<T>;\n}\n\nexport interface UpdateNum<T> {\n  id: number;\n  changes: Partial<T>;\n}\n\nexport type Update<T> = UpdateStr<T> | UpdateNum<T>;\n\nexport type Predicate<T> = (entity: T) => boolean;\n\nexport type EntityMap<T> = (entity: T) => T;\n\nexport interface EntityMapOneNum<T> {\n  id: number;\n  map: EntityMap<T>;\n}\n\nexport interface EntityMapOneStr<T> {\n  id: string;\n  map: EntityMap<T>;\n}\n\nexport type EntityMapOne<T> = EntityMapOneNum<T> | EntityMapOneStr<T>;\n\nexport interface EntityState<T> {\n  ids: string[] | number[];\n  entities: Dictionary<T>;\n}\n\nexport interface EntityDefinition<T> {\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n}\n\nexport interface EntityStateAdapter<T> {\n  addOne<S extends EntityState<T>>(entity: T, state: S): S;\n  addMany<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  setAll<S extends EntityState<T>>(entities: T[], state: S): S;\n  setOne<S extends EntityState<T>>(entity: T, state: S): S;\n\n  removeOne<S extends EntityState<T>>(key: string, state: S): S;\n  removeOne<S extends EntityState<T>>(key: number, state: S): S;\n\n  removeMany<S extends EntityState<T>>(keys: string[], state: S): S;\n  removeMany<S extends EntityState<T>>(keys: number[], state: S): S;\n  removeMany<S extends EntityState<T>>(predicate: Predicate<T>, state: S): S;\n\n  removeAll<S extends EntityState<T>>(state: S): S;\n\n  updateOne<S extends EntityState<T>>(update: Update<T>, state: S): S;\n  updateMany<S extends EntityState<T>>(updates: Update<T>[], state: S): S;\n\n  upsertOne<S extends EntityState<T>>(entity: T, state: S): S;\n  upsertMany<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  mapOne<S extends EntityState<T>>(map: EntityMapOne<T>, state: S): S;\n  map<S extends EntityState<T>>(map: EntityMap<T>, state: S): S;\n}\n\nexport interface EntitySelectors<T, V> {\n  selectIds: (state: V) => string[] | number[];\n  selectEntities: (state: V) => Dictionary<T>;\n  selectAll: (state: V) => T[];\n  selectTotal: (state: V) => number;\n}\n\nexport interface EntityAdapter<T> extends EntityStateAdapter<T> {\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n  getInitialState(): EntityState<T>;\n  getInitialState<S extends object>(state: S): EntityState<T> & S;\n  getSelectors(): EntitySelectors<T, EntityState<T>>;\n  getSelectors<V>(\n    selectState: (state: V) => EntityState<T>\n  ): EntitySelectors<T, V>;\n}\n","import { createSelector } from '@ngrx/store';\nimport {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n\nexport function createEntityAdapter<T>(\n  options: {\n    selectId?: IdSelector<T>;\n    sortComparer?: false | Comparer<T>;\n  } = {}\n): EntityAdapter<T> {\n  const { selectId, sortComparer }: EntityDefinition<T> = {\n    sortComparer: false,\n    selectId: (instance: any) => instance.id,\n    ...options,\n  };\n\n  const stateFactory = createInitialStateFactory<T>();\n  const selectorsFactory = createSelectorsFactory<T>();\n  const stateAdapter = sortComparer\n    ? createSortedStateAdapter(selectId, sortComparer)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n","import { EntityState } from './models';\n\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n  function getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n","import { createSelector } from '@ngrx/store';\nimport { EntityState, EntitySelectors, Dictionary } from './models';\n\nexport function createSelectorsFactory<T>() {\n  function getSelectors(): EntitySelectors<T, EntityState<T>>;\n  function getSelectors<V>(\n    selectState: (state: V) => EntityState<T>\n  ): EntitySelectors<T, V>;\n  function getSelectors(\n    selectState?: (state: any) => EntityState<T>\n  ): EntitySelectors<T, any> {\n    const selectIds = (state: any) => state.ids;\n    const selectEntities = (state: EntityState<T>) => state.entities;\n    const selectAll = createSelector(\n      selectIds,\n      selectEntities,\n      (ids: T[], entities: Dictionary<T>): any =>\n        ids.map((id: any) => (entities as any)[id])\n    );\n\n    const selectTotal = createSelector(selectIds, (ids) => ids.length);\n\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal,\n      };\n    }\n\n    return {\n      selectIds: createSelector(selectState, selectIds),\n      selectEntities: createSelector(selectState, selectEntities),\n      selectAll: createSelector(selectState, selectAll),\n      selectTotal: createSelector(selectState, selectTotal),\n    };\n  }\n\n  return { getSelectors };\n}\n"]}