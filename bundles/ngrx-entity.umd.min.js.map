{"version":3,"sources":["ng://@ngrx/entity/src/state_adapter.ts","ng://@ngrx/entity/src/utils.ts","ng://@ngrx/entity/src/unsorted_state_adapter.ts","ng://@ngrx/entity/src/sorted_state_adapter.ts","ng://@ngrx/entity/src/models.ts","ng://@ngrx/entity/src/create_adapter.ts","ng://@ngrx/entity/src/entity_state.ts","ng://@ngrx/entity/src/state_selectors.ts"],"names":["DidMutate","EntitiesOnly","Both","None","createStateOperator","mutator","arg","state","clonedEntityState","ids","__spread","entities","__assign","didMutate","Object","assign","selectIdValue","entity","selectId","key","isDevMode","undefined","console","warn","toString","createUnsortedStateAdapter","addOneMutably","push","addManyMutably","entities_1","__values","entities_1_1","next","done","value","setAllMutably","removeManyMutably","keysOrPredicate","Array","filter","map","length","id","updateManyMutably","updates","newKeys","update","keys","original","updated","changes","newKey","hasNewKey","takeNewKey","upsertManyMutably","added","entities_2","entities_2_1","didMutateByUpdated","didMutateByAdded","removeAll","addOne","addMany","addAll","setAll","setOne","updateOne","updateMany","upsertOne","upsertMany","removeOne","removeMany","reduce","change","_a","createSortedStateAdapter","sort","newModels","models","model","merge","didMutateIds","takeUpdatedModel","originalIds_1","updatedIndexes_1","index","every","i","j","modelId","entityId","concat","slice","forEach","val","updatesOrMap","options","__assign$1","sortComparer","stateFactory","getInitialState","additionalState","selectorsFactory","getSelectors","selectState","selectIds","selectEntities","selectAll","createSelector","selectTotal","stateAdapter"],"mappings":"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","sourcesContent":["import { EntityState } from './models';\n\nexport enum DidMutate {\n  EntitiesOnly,\n  Both,\n  None,\n}\n\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => DidMutate\n): EntityState<V>;\nexport function createStateOperator<V, R>(\n  mutator: (arg: any, state: any) => DidMutate\n): any {\n  return function operation<S extends EntityState<V>>(arg: R, state: any): S {\n    const clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate === DidMutate.Both) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    if (didMutate === DidMutate.EntitiesOnly) {\n      return {\n        ...state,\n        entities: clonedEntityState.entities,\n      };\n    }\n\n    return state;\n  };\n}\n","import { isDevMode } from '@angular/core';\nimport { IdSelector } from './models';\n\nexport function selectIdValue<T>(entity: T, selectId: IdSelector<T>) {\n  const key = selectId(entity);\n\n  if (isDevMode() && key === undefined) {\n    console.warn(\n      '@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.',\n      'You should probably provide your own `selectId` implementation.',\n      'The entity that was passed:',\n      entity,\n      'The `selectId` implementation:',\n      selectId.toString()\n    );\n  }\n\n  return key;\n}\n","import {\n  EntityState,\n  EntityStateAdapter,\n  IdSelector,\n  Update,\n  Predicate,\n  EntityMap,\n} from './models';\nimport { createStateOperator, DidMutate } from './state_adapter';\nimport { selectIdValue } from './utils';\n\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T>;\nexport function createUnsortedStateAdapter<T>(selectId: IdSelector<T>): any {\n  type R = EntityState<T>;\n\n  function addOneMutably(entity: T, state: R): DidMutate;\n  function addOneMutably(entity: any, state: any): DidMutate {\n    const key = selectIdValue(entity, selectId);\n\n    if (key in state.entities) {\n      return DidMutate.None;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return DidMutate.Both;\n  }\n\n  function addManyMutably(entities: T[], state: R): DidMutate;\n  function addManyMutably(entities: any[], state: any): DidMutate {\n    let didMutate = false;\n\n    for (const entity of entities) {\n      didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n\n  function setAllMutably(entities: T[], state: R): DidMutate;\n  function setAllMutably(entities: any[], state: any): DidMutate {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n\n    return DidMutate.Both;\n  }\n\n  function setOneMutably(entity: T, state: R): DidMutate;\n  function setOneMutably(entity: any, state: any): DidMutate {\n    const key = selectIdValue(entity, selectId);\n\n    if (key in state.entities) {\n      state.entities[key] = entity;\n      return DidMutate.EntitiesOnly;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return DidMutate.Both;\n  }\n\n  function removeOneMutably(key: T, state: R): DidMutate;\n  function removeOneMutably(key: any, state: any): DidMutate {\n    return removeManyMutably([key], state);\n  }\n\n  function removeManyMutably(keys: T[], state: R): DidMutate;\n  function removeManyMutably(predicate: Predicate<T>, state: R): DidMutate;\n  function removeManyMutably(\n    keysOrPredicate: any[] | Predicate<T>,\n    state: any\n  ): DidMutate {\n    const keys =\n      keysOrPredicate instanceof Array\n        ? keysOrPredicate\n        : state.ids.filter((key: any) => keysOrPredicate(state.entities[key]));\n\n    const didMutate =\n      keys\n        .filter((key: any) => key in state.entities)\n        .map((key: any) => delete state.entities[key]).length > 0;\n\n    if (didMutate) {\n      state.ids = state.ids.filter((id: any) => id in state.entities);\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n\n  function removeAll<S extends R>(state: S): S;\n  function removeAll<S extends R>(state: any): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n\n  function takeNewKey(\n    keys: { [id: string]: string },\n    update: Update<T>,\n    state: R\n  ): void;\n  function takeNewKey(\n    keys: { [id: string]: any },\n    update: Update<T>,\n    state: any\n  ): boolean {\n    const original = state.entities[update.id];\n    const updated: T = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n    const hasNewKey = newKey !== update.id;\n\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n\n    return hasNewKey;\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate;\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state);\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const newKeys: { [id: string]: string } = {};\n\n    updates = updates.filter((update) => update.id in state.entities);\n\n    const didMutateEntities = updates.length > 0;\n\n    if (didMutateEntities) {\n      const didMutateIds =\n        updates.filter((update) => takeNewKey(newKeys, update, state)).length >\n        0;\n\n      if (didMutateIds) {\n        state.ids = state.ids.map((id: any) => newKeys[id] || id);\n        return DidMutate.Both;\n      } else {\n        return DidMutate.EntitiesOnly;\n      }\n    }\n\n    return DidMutate.None;\n  }\n\n  function mapMutably(map: EntityMap<T>, state: R): DidMutate;\n  function mapMutably(map: any, state: any): DidMutate {\n    const changes: Update<T>[] = state.ids.reduce(\n      (changes: any[], id: string | number) => {\n        const change = map(state.entities[id]);\n        if (change !== state.entities[id]) {\n          changes.push({ id, changes: change });\n        }\n        return changes;\n      },\n      []\n    );\n    const updates = changes.filter(({ id }) => id in state.entities);\n\n    return updateManyMutably(updates, state);\n  }\n\n  function upsertOneMutably(entity: T, state: R): DidMutate;\n  function upsertOneMutably(entity: any, state: any): DidMutate {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(entities: T[], state: R): DidMutate;\n  function upsertManyMutably(entities: any[], state: any): DidMutate {\n    const added: any[] = [];\n    const updated: any[] = [];\n\n    for (const entity of entities) {\n      const id = selectIdValue(entity, selectId);\n      if (id in state.entities) {\n        updated.push({ id, changes: entity });\n      } else {\n        added.push(entity);\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None &&\n        didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both ||\n        didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    addAll: createStateOperator(setAllMutably),\n    setAll: createStateOperator(setAllMutably),\n    setOne: createStateOperator(setOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n    map: createStateOperator(mapMutably),\n  };\n}\n","import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  EntityStateAdapter,\n  Update,\n  EntityMap,\n} from './models';\nimport { createStateOperator, DidMutate } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\nimport { selectIdValue } from './utils';\n\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T>;\nexport function createSortedStateAdapter<T>(selectId: any, sort: any): any {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n\n  function addOneMutably(entity: T, state: R): DidMutate;\n  function addOneMutably(entity: any, state: any): DidMutate {\n    return addManyMutably([entity], state);\n  }\n\n  function addManyMutably(newModels: T[], state: R): DidMutate;\n  function addManyMutably(newModels: any[], state: any): DidMutate {\n    const models = newModels.filter(\n      (model) => !(selectIdValue(model, selectId) in state.entities)\n    );\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      merge(models, state);\n      return DidMutate.Both;\n    }\n  }\n\n  function setAllMutably(models: T[], state: R): DidMutate;\n  function setAllMutably(models: any[], state: any): DidMutate {\n    state.entities = {};\n    state.ids = [];\n\n    addManyMutably(models, state);\n\n    return DidMutate.Both;\n  }\n\n  function setOneMutably(entity: T, state: R): DidMutate;\n  function setOneMutably(entity: any, state: any): DidMutate {\n    const id = selectIdValue(entity, selectId);\n    if (id in state.entities) {\n      state.ids = state.ids.filter((val: string | number) => val !== id);\n      merge([entity], state);\n      return DidMutate.Both;\n    } else {\n      return addOneMutably(entity, state);\n    }\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate;\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state);\n  }\n\n  function takeUpdatedModel(models: T[], update: Update<T>, state: R): boolean;\n  function takeUpdatedModel(models: any[], update: any, state: any): boolean {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n\n    const original = state.entities[update.id];\n    const updated = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n\n    delete state.entities[update.id];\n\n    models.push(updated);\n\n    return newKey !== update.id;\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const models: T[] = [];\n\n    const didMutateIds =\n      updates.filter((update) => takeUpdatedModel(models, update, state))\n        .length > 0;\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      const originalIds = state.ids;\n      const updatedIndexes: any[] = [];\n      state.ids = state.ids.filter((id: any, index: number) => {\n        if (id in state.entities) {\n          return true;\n        } else {\n          updatedIndexes.push(index);\n          return false;\n        }\n      });\n\n      merge(models, state);\n\n      if (\n        !didMutateIds &&\n        updatedIndexes.every((i: number) => state.ids[i] === originalIds[i])\n      ) {\n        return DidMutate.EntitiesOnly;\n      } else {\n        return DidMutate.Both;\n      }\n    }\n  }\n\n  function mapMutably(map: EntityMap<T>, state: R): DidMutate;\n  function mapMutably(updatesOrMap: any, state: any): DidMutate {\n    const updates: Update<T>[] = state.ids.reduce(\n      (changes: any[], id: string | number) => {\n        const change = updatesOrMap(state.entities[id]);\n        if (change !== state.entities[id]) {\n          changes.push({ id, changes: change });\n        }\n        return changes;\n      },\n      []\n    );\n\n    return updateManyMutably(updates, state);\n  }\n\n  function upsertOneMutably(entity: T, state: R): DidMutate;\n  function upsertOneMutably(entity: any, state: any): DidMutate {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(entities: T[], state: R): DidMutate;\n  function upsertManyMutably(entities: any[], state: any): DidMutate {\n    const added: any[] = [];\n    const updated: any[] = [];\n\n    for (const entity of entities) {\n      const id = selectIdValue(entity, selectId);\n      if (id in state.entities) {\n        updated.push({ id, changes: entity });\n      } else {\n        added.push(entity);\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None &&\n        didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both ||\n        didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n\n  function merge(models: T[], state: R): void;\n  function merge(models: any[], state: any): void {\n    models.sort(sort);\n\n    const ids: any[] = [];\n\n    let i = 0;\n    let j = 0;\n\n    while (i < models.length && j < state.ids.length) {\n      const model = models[i];\n      const modelId = selectIdValue(model, selectId);\n      const entityId = state.ids[j];\n      const entity = state.entities[entityId];\n\n      if (sort(model, entity) <= 0) {\n        ids.push(modelId);\n        i++;\n      } else {\n        ids.push(entityId);\n        j++;\n      }\n    }\n\n    if (i < models.length) {\n      state.ids = ids.concat(models.slice(i).map(selectId));\n    } else {\n      state.ids = ids.concat(state.ids.slice(j));\n    }\n\n    models.forEach((model, i) => {\n      state.entities[selectId(model)] = model;\n    });\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    addAll: createStateOperator(setAllMutably),\n    setAll: createStateOperator(setAllMutably),\n    setOne: createStateOperator(setOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    map: createStateOperator(mapMutably),\n  };\n}\n","export type ComparerStr<T> = (a: T, b: T) => string;\nexport type ComparerNum<T> = (a: T, b: T) => number;\n\nexport type Comparer<T> = ComparerNum<T> | ComparerStr<T>;\n\nexport type IdSelectorStr<T> = (model: T) => string;\nexport type IdSelectorNum<T> = (model: T) => number;\n\nexport type IdSelector<T> = IdSelectorStr<T> | IdSelectorNum<T>;\n\nexport interface DictionaryNum<T> {\n  [id: number]: T | undefined;\n}\n\nexport abstract class Dictionary<T> implements DictionaryNum<T> {\n  [id: string]: T | undefined;\n}\n\nexport interface UpdateStr<T> {\n  id: string;\n  changes: Partial<T>;\n}\n\nexport interface UpdateNum<T> {\n  id: number;\n  changes: Partial<T>;\n}\n\nexport type Update<T> = UpdateStr<T> | UpdateNum<T>;\n\nexport type Predicate<T> = (entity: T) => boolean;\n\nexport type EntityMap<T> = (entity: T) => T;\n\nexport interface EntityState<T> {\n  ids: string[] | number[];\n  entities: Dictionary<T>;\n}\n\nexport interface EntityDefinition<T> {\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n}\n\nexport interface EntityStateAdapter<T> {\n  addOne<S extends EntityState<T>>(entity: T, state: S): S;\n  addMany<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  /** @deprecated addAll has been renamed. Use setAll instead. */\n  addAll<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  setAll<S extends EntityState<T>>(entities: T[], state: S): S;\n  setOne<S extends EntityState<T>>(entity: T, state: S): S;\n\n  removeOne<S extends EntityState<T>>(key: string, state: S): S;\n  removeOne<S extends EntityState<T>>(key: number, state: S): S;\n\n  removeMany<S extends EntityState<T>>(keys: string[], state: S): S;\n  removeMany<S extends EntityState<T>>(keys: number[], state: S): S;\n  removeMany<S extends EntityState<T>>(predicate: Predicate<T>, state: S): S;\n\n  removeAll<S extends EntityState<T>>(state: S): S;\n\n  updateOne<S extends EntityState<T>>(update: Update<T>, state: S): S;\n  updateMany<S extends EntityState<T>>(updates: Update<T>[], state: S): S;\n\n  upsertOne<S extends EntityState<T>>(entity: T, state: S): S;\n  upsertMany<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  map<S extends EntityState<T>>(map: EntityMap<T>, state: S): S;\n}\n\nexport interface EntitySelectors<T, V> {\n  selectIds: (state: V) => string[] | number[];\n  selectEntities: (state: V) => Dictionary<T>;\n  selectAll: (state: V) => T[];\n  selectTotal: (state: V) => number;\n}\n\nexport interface EntityAdapter<T> extends EntityStateAdapter<T> {\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n  getInitialState(): EntityState<T>;\n  getInitialState<S extends object>(state: S): EntityState<T> & S;\n  getSelectors(): EntitySelectors<T, EntityState<T>>;\n  getSelectors<V>(\n    selectState: (state: V) => EntityState<T>\n  ): EntitySelectors<T, V>;\n}\n","import { createSelector } from '@ngrx/store';\nimport {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n\nexport function createEntityAdapter<T>(\n  options: {\n    selectId?: IdSelector<T>;\n    sortComparer?: false | Comparer<T>;\n  } = {}\n): EntityAdapter<T> {\n  const { selectId, sortComparer }: EntityDefinition<T> = {\n    sortComparer: false,\n    selectId: (instance: any) => instance.id,\n    ...options,\n  };\n\n  const stateFactory = createInitialStateFactory<T>();\n  const selectorsFactory = createSelectorsFactory<T>();\n  const stateAdapter = sortComparer\n    ? createSortedStateAdapter(selectId, sortComparer)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n","import { EntityState } from './models';\n\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n  function getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n","import { createSelector } from '@ngrx/store';\nimport { EntityState, EntitySelectors, Dictionary } from './models';\n\nexport function createSelectorsFactory<T>() {\n  function getSelectors(): EntitySelectors<T, EntityState<T>>;\n  function getSelectors<V>(\n    selectState: (state: V) => EntityState<T>\n  ): EntitySelectors<T, V>;\n  function getSelectors(\n    selectState?: (state: any) => EntityState<T>\n  ): EntitySelectors<T, any> {\n    const selectIds = (state: any) => state.ids;\n    const selectEntities = (state: EntityState<T>) => state.entities;\n    const selectAll = createSelector(\n      selectIds,\n      selectEntities,\n      (ids: T[], entities: Dictionary<T>): any =>\n        ids.map((id: any) => (entities as any)[id])\n    );\n\n    const selectTotal = createSelector(selectIds, (ids) => ids.length);\n\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal,\n      };\n    }\n\n    return {\n      selectIds: createSelector(selectState, selectIds),\n      selectEntities: createSelector(selectState, selectEntities),\n      selectAll: createSelector(selectState, selectAll),\n      selectTotal: createSelector(selectState, selectTotal),\n    };\n  }\n\n  return { getSelectors };\n}\n"]}