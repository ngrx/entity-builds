{"version":3,"file":"ngrx-entity.umd.js","sources":["ng://@ngrx/entity/src/entity_state.ts","ng://@ngrx/entity/src/state_selectors.ts","ng://@ngrx/entity/src/state_adapter.ts","ng://@ngrx/entity/src/utils.ts","ng://@ngrx/entity/src/unsorted_state_adapter.ts","ng://@ngrx/entity/src/sorted_state_adapter.ts","ng://@ngrx/entity/src/create_adapter.ts","ng://@ngrx/entity/src/models.ts"],"sourcesContent":["import { EntityState } from './models';\n\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n  function getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n","import { createSelector } from '@ngrx/store';\nimport { EntityState, EntitySelectors, Dictionary } from './models';\n\nexport function createSelectorsFactory<T>() {\n  function getSelectors(): EntitySelectors<T, EntityState<T>>;\n  function getSelectors<V>(\n    selectState: (state: V) => EntityState<T>\n  ): EntitySelectors<T, V>;\n  function getSelectors(\n    selectState?: (state: any) => EntityState<T>\n  ): EntitySelectors<T, any> {\n    const selectIds = (state: any) => state.ids;\n    const selectEntities = (state: EntityState<T>) => state.entities;\n    const selectAll = createSelector(\n      selectIds,\n      selectEntities,\n      (ids: T[], entities: Dictionary<T>): any =>\n        ids.map((id: any) => (entities as any)[id])\n    );\n\n    const selectTotal = createSelector(selectIds, ids => ids.length);\n\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal,\n      };\n    }\n\n    return {\n      selectIds: createSelector(selectState, selectIds),\n      selectEntities: createSelector(selectState, selectEntities),\n      selectAll: createSelector(selectState, selectAll),\n      selectTotal: createSelector(selectState, selectTotal),\n    };\n  }\n\n  return { getSelectors };\n}\n","import { EntityState } from './models';\n\nexport enum DidMutate {\n  EntitiesOnly,\n  Both,\n  None,\n}\n\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => DidMutate\n): EntityState<V>;\nexport function createStateOperator<V, R>(\n  mutator: (arg: any, state: any) => DidMutate\n): any {\n  return function operation<S extends EntityState<V>>(arg: R, state: any): S {\n    const clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate === DidMutate.Both) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    if (didMutate === DidMutate.EntitiesOnly) {\n      return {\n        ...state,\n        entities: clonedEntityState.entities,\n      };\n    }\n\n    return state;\n  };\n}\n","import { isDevMode } from '@angular/core';\nimport { IdSelector } from './models';\n\nexport function selectIdValue<T>(entity: T, selectId: IdSelector<T>) {\n  const key = selectId(entity);\n\n  if (isDevMode() && key === undefined) {\n    console.warn(\n      '@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.',\n      'You should probably provide your own `selectId` implementation.',\n      'The entity that was passed:',\n      entity,\n      'The `selectId` implementation:',\n      selectId.toString()\n    );\n  }\n\n  return key;\n}\n","import {\n  EntityState,\n  EntityStateAdapter,\n  IdSelector,\n  Update,\n  Predicate,\n  EntityMap,\n} from './models';\nimport { createStateOperator, DidMutate } from './state_adapter';\nimport { selectIdValue } from './utils';\n\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T>;\nexport function createUnsortedStateAdapter<T>(selectId: IdSelector<T>): any {\n  type R = EntityState<T>;\n\n  function addOneMutably(entity: T, state: R): DidMutate;\n  function addOneMutably(entity: any, state: any): DidMutate {\n    const key = selectIdValue(entity, selectId);\n\n    if (key in state.entities) {\n      return DidMutate.None;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return DidMutate.Both;\n  }\n\n  function addManyMutably(entities: T[], state: R): DidMutate;\n  function addManyMutably(entities: any[], state: any): DidMutate {\n    let didMutate = false;\n\n    for (const entity of entities) {\n      didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n\n  function setAllMutably(entities: T[], state: R): DidMutate;\n  function setAllMutably(entities: any[], state: any): DidMutate {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n\n    return DidMutate.Both;\n  }\n\n  function setOneMutably(entity: T, state: R): DidMutate;\n  function setOneMutably(entity: any, state: any): DidMutate {\n    const key = selectIdValue(entity, selectId);\n\n    if (key in state.entities) {\n      state.entities[key] = entity;\n      return DidMutate.EntitiesOnly;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return DidMutate.Both;\n  }\n\n  function removeOneMutably(key: T, state: R): DidMutate;\n  function removeOneMutably(key: any, state: any): DidMutate {\n    return removeManyMutably([key], state);\n  }\n\n  function removeManyMutably(keys: T[], state: R): DidMutate;\n  function removeManyMutably(predicate: Predicate<T>, state: R): DidMutate;\n  function removeManyMutably(\n    keysOrPredicate: any[] | Predicate<T>,\n    state: any\n  ): DidMutate {\n    const keys =\n      keysOrPredicate instanceof Array\n        ? keysOrPredicate\n        : state.ids.filter((key: any) => keysOrPredicate(state.entities[key]));\n\n    const didMutate =\n      keys\n        .filter((key: any) => key in state.entities)\n        .map((key: any) => delete state.entities[key]).length > 0;\n\n    if (didMutate) {\n      state.ids = state.ids.filter((id: any) => id in state.entities);\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n\n  function removeAll<S extends R>(state: S): S;\n  function removeAll<S extends R>(state: any): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n\n  function takeNewKey(\n    keys: { [id: string]: string },\n    update: Update<T>,\n    state: R\n  ): void;\n  function takeNewKey(\n    keys: { [id: string]: any },\n    update: Update<T>,\n    state: any\n  ): boolean {\n    const original = state.entities[update.id];\n    const updated: T = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n    const hasNewKey = newKey !== update.id;\n\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n\n    return hasNewKey;\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate;\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state);\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const newKeys: { [id: string]: string } = {};\n\n    updates = updates.filter(update => update.id in state.entities);\n\n    const didMutateEntities = updates.length > 0;\n\n    if (didMutateEntities) {\n      const didMutateIds =\n        updates.filter(update => takeNewKey(newKeys, update, state)).length > 0;\n\n      if (didMutateIds) {\n        state.ids = state.ids.map((id: any) => newKeys[id] || id);\n        return DidMutate.Both;\n      } else {\n        return DidMutate.EntitiesOnly;\n      }\n    }\n\n    return DidMutate.None;\n  }\n\n  function mapMutably(map: EntityMap<T>, state: R): DidMutate;\n  function mapMutably(map: any, state: any): DidMutate {\n    const changes: Update<T>[] = state.ids.reduce(\n      (changes: any[], id: string | number) => {\n        const change = map(state.entities[id]);\n        if (change !== state.entities[id]) {\n          changes.push({ id, changes: change });\n        }\n        return changes;\n      },\n      []\n    );\n    const updates = changes.filter(({ id }) => id in state.entities);\n\n    return updateManyMutably(updates, state);\n  }\n\n  function upsertOneMutably(entity: T, state: R): DidMutate;\n  function upsertOneMutably(entity: any, state: any): DidMutate {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(entities: T[], state: R): DidMutate;\n  function upsertManyMutably(entities: any[], state: any): DidMutate {\n    const added: any[] = [];\n    const updated: any[] = [];\n\n    for (const entity of entities) {\n      const id = selectIdValue(entity, selectId);\n      if (id in state.entities) {\n        updated.push({ id, changes: entity });\n      } else {\n        added.push(entity);\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None &&\n        didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both ||\n        didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    addAll: createStateOperator(setAllMutably),\n    setAll: createStateOperator(setAllMutably),\n    setOne: createStateOperator(setOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n    map: createStateOperator(mapMutably),\n  };\n}\n","import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  EntityStateAdapter,\n  Update,\n  EntityMap,\n} from './models';\nimport { createStateOperator, DidMutate } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\nimport { selectIdValue } from './utils';\n\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T>;\nexport function createSortedStateAdapter<T>(selectId: any, sort: any): any {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n\n  function addOneMutably(entity: T, state: R): DidMutate;\n  function addOneMutably(entity: any, state: any): DidMutate {\n    return addManyMutably([entity], state);\n  }\n\n  function addManyMutably(newModels: T[], state: R): DidMutate;\n  function addManyMutably(newModels: any[], state: any): DidMutate {\n    const models = newModels.filter(\n      model => !(selectIdValue(model, selectId) in state.entities)\n    );\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      merge(models, state);\n      return DidMutate.Both;\n    }\n  }\n\n  function setAllMutably(models: T[], state: R): DidMutate;\n  function setAllMutably(models: any[], state: any): DidMutate {\n    state.entities = {};\n    state.ids = [];\n\n    addManyMutably(models, state);\n\n    return DidMutate.Both;\n  }\n\n  function setOneMutably(entity: T, state: R): DidMutate;\n  function setOneMutably(entity: any, state: any): DidMutate {\n    const id = selectIdValue(entity, selectId);\n    if (id in state.entities) {\n      state.ids = state.ids.filter((val: string | number) => val !== id);\n      merge([entity], state);\n      return DidMutate.Both;\n    } else {\n      return addOneMutably(entity, state);\n    }\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate;\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state);\n  }\n\n  function takeUpdatedModel(models: T[], update: Update<T>, state: R): boolean;\n  function takeUpdatedModel(models: any[], update: any, state: any): boolean {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n\n    const original = state.entities[update.id];\n    const updated = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n\n    delete state.entities[update.id];\n\n    models.push(updated);\n\n    return newKey !== update.id;\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const models: T[] = [];\n\n    const didMutateIds =\n      updates.filter(update => takeUpdatedModel(models, update, state)).length >\n      0;\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      const originalIds = state.ids;\n      const updatedIndexes: any[] = [];\n      state.ids = state.ids.filter((id: any, index: number) => {\n        if (id in state.entities) {\n          return true;\n        } else {\n          updatedIndexes.push(index);\n          return false;\n        }\n      });\n\n      merge(models, state);\n\n      if (\n        !didMutateIds &&\n        updatedIndexes.every((i: number) => state.ids[i] === originalIds[i])\n      ) {\n        return DidMutate.EntitiesOnly;\n      } else {\n        return DidMutate.Both;\n      }\n    }\n  }\n\n  function mapMutably(map: EntityMap<T>, state: R): DidMutate;\n  function mapMutably(updatesOrMap: any, state: any): DidMutate {\n    const updates: Update<T>[] = state.ids.reduce(\n      (changes: any[], id: string | number) => {\n        const change = updatesOrMap(state.entities[id]);\n        if (change !== state.entities[id]) {\n          changes.push({ id, changes: change });\n        }\n        return changes;\n      },\n      []\n    );\n\n    return updateManyMutably(updates, state);\n  }\n\n  function upsertOneMutably(entity: T, state: R): DidMutate;\n  function upsertOneMutably(entity: any, state: any): DidMutate {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(entities: T[], state: R): DidMutate;\n  function upsertManyMutably(entities: any[], state: any): DidMutate {\n    const added: any[] = [];\n    const updated: any[] = [];\n\n    for (const entity of entities) {\n      const id = selectIdValue(entity, selectId);\n      if (id in state.entities) {\n        updated.push({ id, changes: entity });\n      } else {\n        added.push(entity);\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None &&\n        didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both ||\n        didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n\n  function merge(models: T[], state: R): void;\n  function merge(models: any[], state: any): void {\n    models.sort(sort);\n\n    const ids: any[] = [];\n\n    let i = 0;\n    let j = 0;\n\n    while (i < models.length && j < state.ids.length) {\n      const model = models[i];\n      const modelId = selectIdValue(model, selectId);\n      const entityId = state.ids[j];\n      const entity = state.entities[entityId];\n\n      if (sort(model, entity) <= 0) {\n        ids.push(modelId);\n        i++;\n      } else {\n        ids.push(entityId);\n        j++;\n      }\n    }\n\n    if (i < models.length) {\n      state.ids = ids.concat(models.slice(i).map(selectId));\n    } else {\n      state.ids = ids.concat(state.ids.slice(j));\n    }\n\n    models.forEach((model, i) => {\n      state.entities[selectId(model)] = model;\n    });\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    addAll: createStateOperator(setAllMutably),\n    setAll: createStateOperator(setAllMutably),\n    setOne: createStateOperator(setOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    map: createStateOperator(mapMutably),\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n\nexport function createEntityAdapter<T>(\n  options: {\n    selectId?: IdSelector<T>;\n    sortComparer?: false | Comparer<T>;\n  } = {}\n): EntityAdapter<T> {\n  const { selectId, sortComparer }: EntityDefinition<T> = {\n    sortComparer: false,\n    selectId: (instance: any) => instance.id,\n    ...options,\n  };\n\n  const stateFactory = createInitialStateFactory<T>();\n  const selectorsFactory = createSelectorsFactory<T>();\n  const stateAdapter = sortComparer\n    ? createSortedStateAdapter(selectId, sortComparer)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n","export type ComparerStr<T> = (a: T, b: T) => string;\nexport type ComparerNum<T> = (a: T, b: T) => number;\n\nexport type Comparer<T> = ComparerNum<T> | ComparerStr<T>;\n\nexport type IdSelectorStr<T> = (model: T) => string;\nexport type IdSelectorNum<T> = (model: T) => number;\n\nexport type IdSelector<T> = IdSelectorStr<T> | IdSelectorNum<T>;\n\nexport interface DictionaryNum<T> {\n  [id: number]: T | undefined;\n}\n\nexport abstract class Dictionary<T> implements DictionaryNum<T> {\n  [id: string]: T | undefined;\n}\n\nexport interface UpdateStr<T> {\n  id: string;\n  changes: Partial<T>;\n}\n\nexport interface UpdateNum<T> {\n  id: number;\n  changes: Partial<T>;\n}\n\nexport type Update<T> = UpdateStr<T> | UpdateNum<T>;\n\nexport type Predicate<T> = (entity: T) => boolean;\n\nexport type EntityMap<T> = (entity: T) => T;\n\nexport interface EntityState<T> {\n  ids: string[] | number[];\n  entities: Dictionary<T>;\n}\n\nexport interface EntityDefinition<T> {\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n}\n\nexport interface EntityStateAdapter<T> {\n  addOne<S extends EntityState<T>>(entity: T, state: S): S;\n  addMany<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  /** @deprecated addAll has been renamed. Use setAll instead. */\n  addAll<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  setAll<S extends EntityState<T>>(entities: T[], state: S): S;\n  setOne<S extends EntityState<T>>(entity: T, state: S): S;\n\n  removeOne<S extends EntityState<T>>(key: string, state: S): S;\n  removeOne<S extends EntityState<T>>(key: number, state: S): S;\n\n  removeMany<S extends EntityState<T>>(keys: string[], state: S): S;\n  removeMany<S extends EntityState<T>>(keys: number[], state: S): S;\n  removeMany<S extends EntityState<T>>(predicate: Predicate<T>, state: S): S;\n\n  removeAll<S extends EntityState<T>>(state: S): S;\n\n  updateOne<S extends EntityState<T>>(update: Update<T>, state: S): S;\n  updateMany<S extends EntityState<T>>(updates: Update<T>[], state: S): S;\n\n  upsertOne<S extends EntityState<T>>(entity: T, state: S): S;\n  upsertMany<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  map<S extends EntityState<T>>(map: EntityMap<T>, state: S): S;\n}\n\nexport interface EntitySelectors<T, V> {\n  selectIds: (state: V) => string[] | number[];\n  selectEntities: (state: V) => Dictionary<T>;\n  selectAll: (state: V) => T[];\n  selectTotal: (state: V) => number;\n}\n\nexport interface EntityAdapter<T> extends EntityStateAdapter<T> {\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n  getInitialState(): EntityState<T>;\n  getInitialState<S extends object>(state: S): EntityState<T> & S;\n  getSelectors(): EntitySelectors<T, EntityState<T>>;\n  getSelectors<V>(\n    selectState: (state: V) => EntityState<T>\n  ): EntitySelectors<T, V>;\n}\n"],"names":["createSelector","isDevMode","__values"],"mappings":"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"}