{"version":3,"sources":["modules/entity/entity.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ngrx","entity","tslib","store","ng","core","this","tslib_1","DidMutate","createStateOperator","mutator","operation","arg","state","clonedEntityState","ids","__spread","entities","__assign","didMutate","Both","Object","assign","EntitiesOnly","selectIdValue","selectId","key","isDevMode","undefined","console","warn","toString","createUnsortedStateAdapter","addOneMutably","None","push","addManyMutably","e_1","_a","entities_1","__values","entities_1_1","next","done","value","e_1_1","error","return","call","removeManyMutably","keysOrPredicate","Array","filter","map","length","id","updateManyMutably","updates","newKeys","update","takeNewKey","keys","updated","changes","newKey","hasNewKey","upsertManyMutably","e_2","added","entities_2","entities_2_1","e_2_1","didMutateByUpdated","didMutateByAdded","removeAll","addOne","addMany","addAll","addAllMutably","updateOne","updateOneMutably","updateMany","upsertOne","upsertOneMutably","upsertMany","removeOne","removeOneMutably","removeMany","mapMutably","reduce","change","Dictionary","createEntityAdapter","options","sortComparer","instance","stateFactory","createInitialStateFactory","getInitialState","additionalState","selectorsFactory","createSelectorsFactory","getSelectors","selectState","selectIds","selectEntities","selectAll","createSelector","selectTotal","stateAdapter","createSortedStateAdapter","sort","newModels","models","model","merge","didMutateIds","takeUpdatedModel","originalIds_1","updatedIndexes_1","index","every","i","j","modelId","entityId","concat","slice","forEach","updatesOrMap","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license NgRx 8.6.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@ngrx/store'), require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('@ngrx/entity', ['exports', 'tslib', '@ngrx/store', '@angular/core'], factory) :\n    (global = global || self, factory((global.ngrx = global.ngrx || {}, global.ngrx.entity = {}), global.tslib, global.ngrx.store, global.ng.core));\n}(this, function (exports, tslib_1, store, core) { 'use strict';\n\n    function getInitialEntityState() {\n        return {\n            ids: [],\n            entities: {},\n        };\n    }\n    function createInitialStateFactory() {\n        function getInitialState(additionalState) {\n            if (additionalState === void 0) { additionalState = {}; }\n            return Object.assign(getInitialEntityState(), additionalState);\n        }\n        return { getInitialState: getInitialState };\n    }\n\n    function createSelectorsFactory() {\n        function getSelectors(selectState) {\n            var selectIds = function (state) { return state.ids; };\n            var selectEntities = function (state) { return state.entities; };\n            var selectAll = store.createSelector(selectIds, selectEntities, function (ids, entities) {\n                return ids.map(function (id) { return entities[id]; });\n            });\n            var selectTotal = store.createSelector(selectIds, function (ids) { return ids.length; });\n            if (!selectState) {\n                return {\n                    selectIds: selectIds,\n                    selectEntities: selectEntities,\n                    selectAll: selectAll,\n                    selectTotal: selectTotal,\n                };\n            }\n            return {\n                selectIds: store.createSelector(selectState, selectIds),\n                selectEntities: store.createSelector(selectState, selectEntities),\n                selectAll: store.createSelector(selectState, selectAll),\n                selectTotal: store.createSelector(selectState, selectTotal),\n            };\n        }\n        return { getSelectors: getSelectors };\n    }\n\n    var DidMutate;\n    (function (DidMutate) {\n        DidMutate[DidMutate[\"EntitiesOnly\"] = 0] = \"EntitiesOnly\";\n        DidMutate[DidMutate[\"Both\"] = 1] = \"Both\";\n        DidMutate[DidMutate[\"None\"] = 2] = \"None\";\n    })(DidMutate || (DidMutate = {}));\n    function createStateOperator(mutator) {\n        return function operation(arg, state) {\n            var clonedEntityState = {\n                ids: tslib_1.__spread(state.ids),\n                entities: tslib_1.__assign({}, state.entities),\n            };\n            var didMutate = mutator(arg, clonedEntityState);\n            if (didMutate === DidMutate.Both) {\n                return Object.assign({}, state, clonedEntityState);\n            }\n            if (didMutate === DidMutate.EntitiesOnly) {\n                return tslib_1.__assign({}, state, { entities: clonedEntityState.entities });\n            }\n            return state;\n        };\n    }\n\n    function selectIdValue(entity, selectId) {\n        var key = selectId(entity);\n        if (core.isDevMode() && key === undefined) {\n            console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n        }\n        return key;\n    }\n\n    function createUnsortedStateAdapter(selectId) {\n        function addOneMutably(entity, state) {\n            var key = selectIdValue(entity, selectId);\n            if (key in state.entities) {\n                return DidMutate.None;\n            }\n            state.ids.push(key);\n            state.entities[key] = entity;\n            return DidMutate.Both;\n        }\n        function addManyMutably(entities, state) {\n            var e_1, _a;\n            var didMutate = false;\n            try {\n                for (var entities_1 = tslib_1.__values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {\n                    var entity = entities_1_1.value;\n                    didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return didMutate ? DidMutate.Both : DidMutate.None;\n        }\n        function addAllMutably(entities, state) {\n            state.ids = [];\n            state.entities = {};\n            addManyMutably(entities, state);\n            return DidMutate.Both;\n        }\n        function removeOneMutably(key, state) {\n            return removeManyMutably([key], state);\n        }\n        function removeManyMutably(keysOrPredicate, state) {\n            var keys = keysOrPredicate instanceof Array\n                ? keysOrPredicate\n                : state.ids.filter(function (key) { return keysOrPredicate(state.entities[key]); });\n            var didMutate = keys\n                .filter(function (key) { return key in state.entities; })\n                .map(function (key) { return delete state.entities[key]; }).length > 0;\n            if (didMutate) {\n                state.ids = state.ids.filter(function (id) { return id in state.entities; });\n            }\n            return didMutate ? DidMutate.Both : DidMutate.None;\n        }\n        function removeAll(state) {\n            return Object.assign({}, state, {\n                ids: [],\n                entities: {},\n            });\n        }\n        function takeNewKey(keys, update, state) {\n            var original = state.entities[update.id];\n            var updated = Object.assign({}, original, update.changes);\n            var newKey = selectIdValue(updated, selectId);\n            var hasNewKey = newKey !== update.id;\n            if (hasNewKey) {\n                keys[update.id] = newKey;\n                delete state.entities[update.id];\n            }\n            state.entities[newKey] = updated;\n            return hasNewKey;\n        }\n        function updateOneMutably(update, state) {\n            return updateManyMutably([update], state);\n        }\n        function updateManyMutably(updates, state) {\n            var newKeys = {};\n            updates = updates.filter(function (update) { return update.id in state.entities; });\n            var didMutateEntities = updates.length > 0;\n            if (didMutateEntities) {\n                var didMutateIds = updates.filter(function (update) { return takeNewKey(newKeys, update, state); }).length > 0;\n                if (didMutateIds) {\n                    state.ids = state.ids.map(function (id) { return newKeys[id] || id; });\n                    return DidMutate.Both;\n                }\n                else {\n                    return DidMutate.EntitiesOnly;\n                }\n            }\n            return DidMutate.None;\n        }\n        function mapMutably(map, state) {\n            var changes = state.ids.reduce(function (changes, id) {\n                var change = map(state.entities[id]);\n                if (change !== state.entities[id]) {\n                    changes.push({ id: id, changes: change });\n                }\n                return changes;\n            }, []);\n            var updates = changes.filter(function (_a) {\n                var id = _a.id;\n                return id in state.entities;\n            });\n            return updateManyMutably(updates, state);\n        }\n        function upsertOneMutably(entity, state) {\n            return upsertManyMutably([entity], state);\n        }\n        function upsertManyMutably(entities, state) {\n            var e_2, _a;\n            var added = [];\n            var updated = [];\n            try {\n                for (var entities_2 = tslib_1.__values(entities), entities_2_1 = entities_2.next(); !entities_2_1.done; entities_2_1 = entities_2.next()) {\n                    var entity = entities_2_1.value;\n                    var id = selectIdValue(entity, selectId);\n                    if (id in state.entities) {\n                        updated.push({ id: id, changes: entity });\n                    }\n                    else {\n                        added.push(entity);\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (entities_2_1 && !entities_2_1.done && (_a = entities_2.return)) _a.call(entities_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            var didMutateByUpdated = updateManyMutably(updated, state);\n            var didMutateByAdded = addManyMutably(added, state);\n            switch (true) {\n                case didMutateByAdded === DidMutate.None &&\n                    didMutateByUpdated === DidMutate.None:\n                    return DidMutate.None;\n                case didMutateByAdded === DidMutate.Both ||\n                    didMutateByUpdated === DidMutate.Both:\n                    return DidMutate.Both;\n                default:\n                    return DidMutate.EntitiesOnly;\n            }\n        }\n        return {\n            removeAll: removeAll,\n            addOne: createStateOperator(addOneMutably),\n            addMany: createStateOperator(addManyMutably),\n            addAll: createStateOperator(addAllMutably),\n            updateOne: createStateOperator(updateOneMutably),\n            updateMany: createStateOperator(updateManyMutably),\n            upsertOne: createStateOperator(upsertOneMutably),\n            upsertMany: createStateOperator(upsertManyMutably),\n            removeOne: createStateOperator(removeOneMutably),\n            removeMany: createStateOperator(removeManyMutably),\n            map: createStateOperator(mapMutably),\n        };\n    }\n\n    function createSortedStateAdapter(selectId, sort) {\n        var _a = createUnsortedStateAdapter(selectId), removeOne = _a.removeOne, removeMany = _a.removeMany, removeAll = _a.removeAll;\n        function addOneMutably(entity, state) {\n            return addManyMutably([entity], state);\n        }\n        function addManyMutably(newModels, state) {\n            var models = newModels.filter(function (model) { return !(selectIdValue(model, selectId) in state.entities); });\n            if (models.length === 0) {\n                return DidMutate.None;\n            }\n            else {\n                merge(models, state);\n                return DidMutate.Both;\n            }\n        }\n        function addAllMutably(models, state) {\n            state.entities = {};\n            state.ids = [];\n            addManyMutably(models, state);\n            return DidMutate.Both;\n        }\n        function updateOneMutably(update, state) {\n            return updateManyMutably([update], state);\n        }\n        function takeUpdatedModel(models, update, state) {\n            if (!(update.id in state.entities)) {\n                return false;\n            }\n            var original = state.entities[update.id];\n            var updated = Object.assign({}, original, update.changes);\n            var newKey = selectIdValue(updated, selectId);\n            delete state.entities[update.id];\n            models.push(updated);\n            return newKey !== update.id;\n        }\n        function updateManyMutably(updates, state) {\n            var models = [];\n            var didMutateIds = updates.filter(function (update) { return takeUpdatedModel(models, update, state); }).length >\n                0;\n            if (models.length === 0) {\n                return DidMutate.None;\n            }\n            else {\n                var originalIds_1 = state.ids;\n                var updatedIndexes_1 = [];\n                state.ids = state.ids.filter(function (id, index) {\n                    if (id in state.entities) {\n                        return true;\n                    }\n                    else {\n                        updatedIndexes_1.push(index);\n                        return false;\n                    }\n                });\n                merge(models, state);\n                if (!didMutateIds &&\n                    updatedIndexes_1.every(function (i) { return state.ids[i] === originalIds_1[i]; })) {\n                    return DidMutate.EntitiesOnly;\n                }\n                else {\n                    return DidMutate.Both;\n                }\n            }\n        }\n        function mapMutably(updatesOrMap, state) {\n            var updates = state.ids.reduce(function (changes, id) {\n                var change = updatesOrMap(state.entities[id]);\n                if (change !== state.entities[id]) {\n                    changes.push({ id: id, changes: change });\n                }\n                return changes;\n            }, []);\n            return updateManyMutably(updates, state);\n        }\n        function upsertOneMutably(entity, state) {\n            return upsertManyMutably([entity], state);\n        }\n        function upsertManyMutably(entities, state) {\n            var e_1, _a;\n            var added = [];\n            var updated = [];\n            try {\n                for (var entities_1 = tslib_1.__values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {\n                    var entity = entities_1_1.value;\n                    var id = selectIdValue(entity, selectId);\n                    if (id in state.entities) {\n                        updated.push({ id: id, changes: entity });\n                    }\n                    else {\n                        added.push(entity);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var didMutateByUpdated = updateManyMutably(updated, state);\n            var didMutateByAdded = addManyMutably(added, state);\n            switch (true) {\n                case didMutateByAdded === DidMutate.None &&\n                    didMutateByUpdated === DidMutate.None:\n                    return DidMutate.None;\n                case didMutateByAdded === DidMutate.Both ||\n                    didMutateByUpdated === DidMutate.Both:\n                    return DidMutate.Both;\n                default:\n                    return DidMutate.EntitiesOnly;\n            }\n        }\n        function merge(models, state) {\n            models.sort(sort);\n            var ids = [];\n            var i = 0;\n            var j = 0;\n            while (i < models.length && j < state.ids.length) {\n                var model = models[i];\n                var modelId = selectIdValue(model, selectId);\n                var entityId = state.ids[j];\n                var entity = state.entities[entityId];\n                if (sort(model, entity) <= 0) {\n                    ids.push(modelId);\n                    i++;\n                }\n                else {\n                    ids.push(entityId);\n                    j++;\n                }\n            }\n            if (i < models.length) {\n                state.ids = ids.concat(models.slice(i).map(selectId));\n            }\n            else {\n                state.ids = ids.concat(state.ids.slice(j));\n            }\n            models.forEach(function (model, i) {\n                state.entities[selectId(model)] = model;\n            });\n        }\n        return {\n            removeOne: removeOne,\n            removeMany: removeMany,\n            removeAll: removeAll,\n            addOne: createStateOperator(addOneMutably),\n            updateOne: createStateOperator(updateOneMutably),\n            upsertOne: createStateOperator(upsertOneMutably),\n            addAll: createStateOperator(addAllMutably),\n            addMany: createStateOperator(addManyMutably),\n            updateMany: createStateOperator(updateManyMutably),\n            upsertMany: createStateOperator(upsertManyMutably),\n            map: createStateOperator(mapMutably),\n        };\n    }\n\n    function createEntityAdapter(options) {\n        if (options === void 0) { options = {}; }\n        var _a = tslib_1.__assign({ sortComparer: false, selectId: function (instance) { return instance.id; } }, options), selectId = _a.selectId, sortComparer = _a.sortComparer;\n        var stateFactory = createInitialStateFactory();\n        var selectorsFactory = createSelectorsFactory();\n        var stateAdapter = sortComparer\n            ? createSortedStateAdapter(selectId, sortComparer)\n            : createUnsortedStateAdapter(selectId);\n        return tslib_1.__assign({ selectId: selectId,\n            sortComparer: sortComparer }, stateFactory, selectorsFactory, stateAdapter);\n    }\n\n    var Dictionary = /** @class */ (function () {\n        function Dictionary() {\n        }\n        return Dictionary;\n    }());\n\n    /**\n     * DO NOT EDIT\n     *\n     * This file is automatically generated at build\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.createEntityAdapter = createEntityAdapter;\n    exports.Dictionary = Dictionary;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=entity.umd.js.map\n"]}