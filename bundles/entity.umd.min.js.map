{"version":3,"sources":["modules/entity/entity.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ngrx","entity","tslib","store","ng","core","this","DidMutate","createStateOperator","mutator","operation","arg","state","clonedEntityState","ids","__spread","entities","__assign","didMutate","Both","Object","assign","EntitiesOnly","selectIdValue","selectId","key","isDevMode","undefined","console","warn","toString","createUnsortedStateAdapter","addOneMutably","None","push","addManyMutably","e_1","_a","entities_1","__values","entities_1_1","next","done","value","e_1_1","error","return","call","setAllMutably","removeManyMutably","keysOrPredicate","Array","filter","map","length","id","updateManyMutably","updates","newKeys","update","takeNewKey","keys","updated","changes","newKey","hasNewKey","upsertManyMutably","e_2","added","entities_2","entities_2_1","e_2_1","didMutateByUpdated","didMutateByAdded","removeAll","addOne","addMany","addAll","setAll","setOne","setOneMutably","updateOne","updateOneMutably","updateMany","upsertOne","upsertOneMutably","upsertMany","removeOne","removeOneMutably","removeMany","mapMutably","reduce","change","Dictionary","createEntityAdapter","options","sortComparer","instance","stateFactory","createInitialStateFactory","getInitialState","additionalState","selectorsFactory","createSelectorsFactory","getSelectors","selectState","selectIds","selectEntities","selectAll","createSelector","selectTotal","stateAdapter","createSortedStateAdapter","sort","newModels","models","model","merge","didMutateIds","takeUpdatedModel","originalIds_1","updatedIndexes_1","index","every","i","j","modelId","entityId","concat","slice","forEach","val","updatesOrMap","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license NgRx 9.1.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@ngrx/store'), require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('@ngrx/entity', ['exports', 'tslib', '@ngrx/store', '@angular/core'], factory) :\n    (global = global || self, factory((global.ngrx = global.ngrx || {}, global.ngrx.entity = {}), global.tslib, global.ngrx.store, global.ng.core));\n}(this, (function (exports, tslib, store, core) { 'use strict';\n\n    function getInitialEntityState() {\n        return {\n            ids: [],\n            entities: {},\n        };\n    }\n    function createInitialStateFactory() {\n        function getInitialState(additionalState) {\n            if (additionalState === void 0) { additionalState = {}; }\n            return Object.assign(getInitialEntityState(), additionalState);\n        }\n        return { getInitialState: getInitialState };\n    }\n\n    function createSelectorsFactory() {\n        function getSelectors(selectState) {\n            var selectIds = function (state) { return state.ids; };\n            var selectEntities = function (state) { return state.entities; };\n            var selectAll = store.createSelector(selectIds, selectEntities, function (ids, entities) {\n                return ids.map(function (id) { return entities[id]; });\n            });\n            var selectTotal = store.createSelector(selectIds, function (ids) { return ids.length; });\n            if (!selectState) {\n                return {\n                    selectIds: selectIds,\n                    selectEntities: selectEntities,\n                    selectAll: selectAll,\n                    selectTotal: selectTotal,\n                };\n            }\n            return {\n                selectIds: store.createSelector(selectState, selectIds),\n                selectEntities: store.createSelector(selectState, selectEntities),\n                selectAll: store.createSelector(selectState, selectAll),\n                selectTotal: store.createSelector(selectState, selectTotal),\n            };\n        }\n        return { getSelectors: getSelectors };\n    }\n\n    var DidMutate;\n    (function (DidMutate) {\n        DidMutate[DidMutate[\"EntitiesOnly\"] = 0] = \"EntitiesOnly\";\n        DidMutate[DidMutate[\"Both\"] = 1] = \"Both\";\n        DidMutate[DidMutate[\"None\"] = 2] = \"None\";\n    })(DidMutate || (DidMutate = {}));\n    function createStateOperator(mutator) {\n        return function operation(arg, state) {\n            var clonedEntityState = {\n                ids: tslib.__spread(state.ids),\n                entities: tslib.__assign({}, state.entities),\n            };\n            var didMutate = mutator(arg, clonedEntityState);\n            if (didMutate === DidMutate.Both) {\n                return Object.assign({}, state, clonedEntityState);\n            }\n            if (didMutate === DidMutate.EntitiesOnly) {\n                return tslib.__assign(tslib.__assign({}, state), { entities: clonedEntityState.entities });\n            }\n            return state;\n        };\n    }\n\n    function selectIdValue(entity, selectId) {\n        var key = selectId(entity);\n        if (core.isDevMode() && key === undefined) {\n            console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n        }\n        return key;\n    }\n\n    function createUnsortedStateAdapter(selectId) {\n        function addOneMutably(entity, state) {\n            var key = selectIdValue(entity, selectId);\n            if (key in state.entities) {\n                return DidMutate.None;\n            }\n            state.ids.push(key);\n            state.entities[key] = entity;\n            return DidMutate.Both;\n        }\n        function addManyMutably(entities, state) {\n            var e_1, _a;\n            var didMutate = false;\n            try {\n                for (var entities_1 = tslib.__values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {\n                    var entity = entities_1_1.value;\n                    didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return didMutate ? DidMutate.Both : DidMutate.None;\n        }\n        function setAllMutably(entities, state) {\n            state.ids = [];\n            state.entities = {};\n            addManyMutably(entities, state);\n            return DidMutate.Both;\n        }\n        function setOneMutably(entity, state) {\n            var key = selectIdValue(entity, selectId);\n            if (key in state.entities) {\n                state.entities[key] = entity;\n                return DidMutate.EntitiesOnly;\n            }\n            state.ids.push(key);\n            state.entities[key] = entity;\n            return DidMutate.Both;\n        }\n        function removeOneMutably(key, state) {\n            return removeManyMutably([key], state);\n        }\n        function removeManyMutably(keysOrPredicate, state) {\n            var keys = keysOrPredicate instanceof Array\n                ? keysOrPredicate\n                : state.ids.filter(function (key) { return keysOrPredicate(state.entities[key]); });\n            var didMutate = keys\n                .filter(function (key) { return key in state.entities; })\n                .map(function (key) { return delete state.entities[key]; }).length > 0;\n            if (didMutate) {\n                state.ids = state.ids.filter(function (id) { return id in state.entities; });\n            }\n            return didMutate ? DidMutate.Both : DidMutate.None;\n        }\n        function removeAll(state) {\n            return Object.assign({}, state, {\n                ids: [],\n                entities: {},\n            });\n        }\n        function takeNewKey(keys, update, state) {\n            var original = state.entities[update.id];\n            var updated = Object.assign({}, original, update.changes);\n            var newKey = selectIdValue(updated, selectId);\n            var hasNewKey = newKey !== update.id;\n            if (hasNewKey) {\n                keys[update.id] = newKey;\n                delete state.entities[update.id];\n            }\n            state.entities[newKey] = updated;\n            return hasNewKey;\n        }\n        function updateOneMutably(update, state) {\n            return updateManyMutably([update], state);\n        }\n        function updateManyMutably(updates, state) {\n            var newKeys = {};\n            updates = updates.filter(function (update) { return update.id in state.entities; });\n            var didMutateEntities = updates.length > 0;\n            if (didMutateEntities) {\n                var didMutateIds = updates.filter(function (update) { return takeNewKey(newKeys, update, state); }).length > 0;\n                if (didMutateIds) {\n                    state.ids = state.ids.map(function (id) { return newKeys[id] || id; });\n                    return DidMutate.Both;\n                }\n                else {\n                    return DidMutate.EntitiesOnly;\n                }\n            }\n            return DidMutate.None;\n        }\n        function mapMutably(map, state) {\n            var changes = state.ids.reduce(function (changes, id) {\n                var change = map(state.entities[id]);\n                if (change !== state.entities[id]) {\n                    changes.push({ id: id, changes: change });\n                }\n                return changes;\n            }, []);\n            var updates = changes.filter(function (_a) {\n                var id = _a.id;\n                return id in state.entities;\n            });\n            return updateManyMutably(updates, state);\n        }\n        function upsertOneMutably(entity, state) {\n            return upsertManyMutably([entity], state);\n        }\n        function upsertManyMutably(entities, state) {\n            var e_2, _a;\n            var added = [];\n            var updated = [];\n            try {\n                for (var entities_2 = tslib.__values(entities), entities_2_1 = entities_2.next(); !entities_2_1.done; entities_2_1 = entities_2.next()) {\n                    var entity = entities_2_1.value;\n                    var id = selectIdValue(entity, selectId);\n                    if (id in state.entities) {\n                        updated.push({ id: id, changes: entity });\n                    }\n                    else {\n                        added.push(entity);\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (entities_2_1 && !entities_2_1.done && (_a = entities_2.return)) _a.call(entities_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            var didMutateByUpdated = updateManyMutably(updated, state);\n            var didMutateByAdded = addManyMutably(added, state);\n            switch (true) {\n                case didMutateByAdded === DidMutate.None &&\n                    didMutateByUpdated === DidMutate.None:\n                    return DidMutate.None;\n                case didMutateByAdded === DidMutate.Both ||\n                    didMutateByUpdated === DidMutate.Both:\n                    return DidMutate.Both;\n                default:\n                    return DidMutate.EntitiesOnly;\n            }\n        }\n        return {\n            removeAll: removeAll,\n            addOne: createStateOperator(addOneMutably),\n            addMany: createStateOperator(addManyMutably),\n            addAll: createStateOperator(setAllMutably),\n            setAll: createStateOperator(setAllMutably),\n            setOne: createStateOperator(setOneMutably),\n            updateOne: createStateOperator(updateOneMutably),\n            updateMany: createStateOperator(updateManyMutably),\n            upsertOne: createStateOperator(upsertOneMutably),\n            upsertMany: createStateOperator(upsertManyMutably),\n            removeOne: createStateOperator(removeOneMutably),\n            removeMany: createStateOperator(removeManyMutably),\n            map: createStateOperator(mapMutably),\n        };\n    }\n\n    function createSortedStateAdapter(selectId, sort) {\n        var _a = createUnsortedStateAdapter(selectId), removeOne = _a.removeOne, removeMany = _a.removeMany, removeAll = _a.removeAll;\n        function addOneMutably(entity, state) {\n            return addManyMutably([entity], state);\n        }\n        function addManyMutably(newModels, state) {\n            var models = newModels.filter(function (model) { return !(selectIdValue(model, selectId) in state.entities); });\n            if (models.length === 0) {\n                return DidMutate.None;\n            }\n            else {\n                merge(models, state);\n                return DidMutate.Both;\n            }\n        }\n        function setAllMutably(models, state) {\n            state.entities = {};\n            state.ids = [];\n            addManyMutably(models, state);\n            return DidMutate.Both;\n        }\n        function setOneMutably(entity, state) {\n            var id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                state.ids = state.ids.filter(function (val) { return val !== id; });\n                merge([entity], state);\n                return DidMutate.Both;\n            }\n            else {\n                return addOneMutably(entity, state);\n            }\n        }\n        function updateOneMutably(update, state) {\n            return updateManyMutably([update], state);\n        }\n        function takeUpdatedModel(models, update, state) {\n            if (!(update.id in state.entities)) {\n                return false;\n            }\n            var original = state.entities[update.id];\n            var updated = Object.assign({}, original, update.changes);\n            var newKey = selectIdValue(updated, selectId);\n            delete state.entities[update.id];\n            models.push(updated);\n            return newKey !== update.id;\n        }\n        function updateManyMutably(updates, state) {\n            var models = [];\n            var didMutateIds = updates.filter(function (update) { return takeUpdatedModel(models, update, state); }).length >\n                0;\n            if (models.length === 0) {\n                return DidMutate.None;\n            }\n            else {\n                var originalIds_1 = state.ids;\n                var updatedIndexes_1 = [];\n                state.ids = state.ids.filter(function (id, index) {\n                    if (id in state.entities) {\n                        return true;\n                    }\n                    else {\n                        updatedIndexes_1.push(index);\n                        return false;\n                    }\n                });\n                merge(models, state);\n                if (!didMutateIds &&\n                    updatedIndexes_1.every(function (i) { return state.ids[i] === originalIds_1[i]; })) {\n                    return DidMutate.EntitiesOnly;\n                }\n                else {\n                    return DidMutate.Both;\n                }\n            }\n        }\n        function mapMutably(updatesOrMap, state) {\n            var updates = state.ids.reduce(function (changes, id) {\n                var change = updatesOrMap(state.entities[id]);\n                if (change !== state.entities[id]) {\n                    changes.push({ id: id, changes: change });\n                }\n                return changes;\n            }, []);\n            return updateManyMutably(updates, state);\n        }\n        function upsertOneMutably(entity, state) {\n            return upsertManyMutably([entity], state);\n        }\n        function upsertManyMutably(entities, state) {\n            var e_1, _a;\n            var added = [];\n            var updated = [];\n            try {\n                for (var entities_1 = tslib.__values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {\n                    var entity = entities_1_1.value;\n                    var id = selectIdValue(entity, selectId);\n                    if (id in state.entities) {\n                        updated.push({ id: id, changes: entity });\n                    }\n                    else {\n                        added.push(entity);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var didMutateByUpdated = updateManyMutably(updated, state);\n            var didMutateByAdded = addManyMutably(added, state);\n            switch (true) {\n                case didMutateByAdded === DidMutate.None &&\n                    didMutateByUpdated === DidMutate.None:\n                    return DidMutate.None;\n                case didMutateByAdded === DidMutate.Both ||\n                    didMutateByUpdated === DidMutate.Both:\n                    return DidMutate.Both;\n                default:\n                    return DidMutate.EntitiesOnly;\n            }\n        }\n        function merge(models, state) {\n            models.sort(sort);\n            var ids = [];\n            var i = 0;\n            var j = 0;\n            while (i < models.length && j < state.ids.length) {\n                var model = models[i];\n                var modelId = selectIdValue(model, selectId);\n                var entityId = state.ids[j];\n                var entity = state.entities[entityId];\n                if (sort(model, entity) <= 0) {\n                    ids.push(modelId);\n                    i++;\n                }\n                else {\n                    ids.push(entityId);\n                    j++;\n                }\n            }\n            if (i < models.length) {\n                state.ids = ids.concat(models.slice(i).map(selectId));\n            }\n            else {\n                state.ids = ids.concat(state.ids.slice(j));\n            }\n            models.forEach(function (model, i) {\n                state.entities[selectId(model)] = model;\n            });\n        }\n        return {\n            removeOne: removeOne,\n            removeMany: removeMany,\n            removeAll: removeAll,\n            addOne: createStateOperator(addOneMutably),\n            updateOne: createStateOperator(updateOneMutably),\n            upsertOne: createStateOperator(upsertOneMutably),\n            addAll: createStateOperator(setAllMutably),\n            setAll: createStateOperator(setAllMutably),\n            setOne: createStateOperator(setOneMutably),\n            addMany: createStateOperator(addManyMutably),\n            updateMany: createStateOperator(updateManyMutably),\n            upsertMany: createStateOperator(upsertManyMutably),\n            map: createStateOperator(mapMutably),\n        };\n    }\n\n    function createEntityAdapter(options) {\n        if (options === void 0) { options = {}; }\n        var _a = tslib.__assign({ sortComparer: false, selectId: function (instance) { return instance.id; } }, options), selectId = _a.selectId, sortComparer = _a.sortComparer;\n        var stateFactory = createInitialStateFactory();\n        var selectorsFactory = createSelectorsFactory();\n        var stateAdapter = sortComparer\n            ? createSortedStateAdapter(selectId, sortComparer)\n            : createUnsortedStateAdapter(selectId);\n        return tslib.__assign(tslib.__assign(tslib.__assign({ selectId: selectId,\n            sortComparer: sortComparer }, stateFactory), selectorsFactory), stateAdapter);\n    }\n\n    var Dictionary = /** @class */ (function () {\n        function Dictionary() {\n        }\n        return Dictionary;\n    }());\n\n    /**\n     * DO NOT EDIT\n     *\n     * This file is automatically generated at build\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.Dictionary = Dictionary;\n    exports.createEntityAdapter = createEntityAdapter;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=entity.umd.js.map\n"]}