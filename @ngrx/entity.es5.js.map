{"version":3,"file":"entity.es5.js","sources":["../../../modules/entity/src/create_adapter.ts","../../../modules/entity/src/sorted_state_adapter.ts","../../../modules/entity/src/unsorted_state_adapter.ts","../../../modules/entity/src/state_adapter.ts","../../../modules/entity/src/state_selectors.ts","../../../modules/entity/src/entity_state.ts"],"sourcesContent":["import { createSelector } from '@ngrx/store';\nimport {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n\nexport function createEntityAdapter<T>(\n  options: {\n    selectId?: IdSelector<T>;\n    sortComparer?: false | Comparer<T>;\n  } = {}\n): EntityAdapter<T> {\n  const { selectId, sortComparer }: EntityDefinition<T> = {\n    sortComparer: false,\n    selectId: (instance: any) => instance.id,\n    ...options,\n  };\n\n  const stateFactory = createInitialStateFactory<T>();\n  const selectorsFactory = createSelectorsFactory<T>();\n  const stateAdapter = sortComparer\n    ? createSortedStateAdapter(selectId, sortComparer)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n","import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  Dictionary,\n  EntityStateAdapter,\n  Update,\n} from './models';\nimport { createStateOperator, DidMutate } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T>;\nexport function createSortedStateAdapter<T>(selectId: any, sort: any): any {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n\n  function addOneMutably(entity: T, state: R): DidMutate;\n  function addOneMutably(entity: any, state: any): DidMutate {\n    return addManyMutably([entity], state);\n  }\n\n  function addManyMutably(newModels: T[], state: R): DidMutate;\n  function addManyMutably(newModels: any[], state: any): DidMutate {\n    const models = newModels.filter(\n      model => !(selectId(model) in state.entities)\n    );\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      merge(models, state);\n      return DidMutate.Both;\n    }\n  }\n\n  function addAllMutably(models: T[], state: R): DidMutate;\n  function addAllMutably(models: any[], state: any): DidMutate {\n    state.entities = {};\n    state.ids = [];\n\n    addManyMutably(models, state);\n\n    return DidMutate.Both;\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate;\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state);\n  }\n\n  function takeUpdatedModel(models: T[], update: Update<T>, state: R): boolean;\n  function takeUpdatedModel(models: any[], update: any, state: any): boolean {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n\n    const original = state.entities[update.id];\n    const updated = Object.assign({}, original, update.changes);\n    const newKey = selectId(updated);\n\n    delete state.entities[update.id];\n\n    models.push(updated);\n\n    return newKey !== update.id;\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const models: T[] = [];\n\n    const didMutateIds =\n      updates.filter(update => takeUpdatedModel(models, update, state)).length >\n      0;\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      const originalIds = state.ids;\n      const updatedIndexes: any[] = [];\n      state.ids = state.ids.filter((id: any, index: number) => {\n        if (id in state.entities) {\n          return true;\n        } else {\n          updatedIndexes.push(index);\n          return false;\n        }\n      });\n\n      merge(models, state);\n\n      if (\n        !didMutateIds &&\n        updatedIndexes.every((i: number) => state.ids[i] === originalIds[i])\n      ) {\n        return DidMutate.EntitiesOnly;\n      } else {\n        return DidMutate.Both;\n      }\n    }\n  }\n\n  function upsertOneMutably(update: Update<T>, state: R): DidMutate;\n  function upsertOneMutably(update: any, state: any): DidMutate {\n    return upsertManyMutably([update], state);\n  }\n\n  function upsertManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function upsertManyMutably(updates: any[], state: any): DidMutate {\n    const added: T[] = [];\n    const updated: Update<T>[] = [];\n\n    for (const update of updates) {\n      if (update.id in state.entities) {\n        updated.push(update);\n      } else {\n        added.push({\n          ...update.changes,\n          id: update.id,\n        });\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None &&\n        didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both ||\n        didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n\n  function merge(models: T[], state: R): void;\n  function merge(models: any[], state: any): void {\n    models.sort(sort);\n\n    const ids: any[] = [];\n\n    let i = 0;\n    let j = 0;\n\n    while (i < models.length && j < state.ids.length) {\n      const model = models[i];\n      const modelId = selectId(model);\n      const entityId = state.ids[j];\n      const entity = state.entities[entityId];\n\n      if (sort(model, entity) <= 0) {\n        ids.push(modelId);\n        i++;\n      } else {\n        ids.push(entityId);\n        j++;\n      }\n    }\n\n    if (i < models.length) {\n      state.ids = ids.concat(models.slice(i).map(selectId));\n    } else {\n      state.ids = ids.concat(state.ids.slice(j));\n    }\n\n    models.forEach((model, i) => {\n      state.entities[selectId(model)] = model;\n    });\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    addAll: createStateOperator(addAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n  };\n}\n","import { EntityState, EntityStateAdapter, IdSelector, Update } from './models';\nimport { createStateOperator, DidMutate } from './state_adapter';\n\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T>;\nexport function createUnsortedStateAdapter<T>(selectId: IdSelector<T>): any {\n  type R = EntityState<T>;\n\n  function addOneMutably(entity: T, state: R): DidMutate;\n  function addOneMutably(entity: any, state: any): DidMutate {\n    const key = selectId(entity);\n\n    if (key in state.entities) {\n      return DidMutate.None;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return DidMutate.Both;\n  }\n\n  function addManyMutably(entities: T[], state: R): DidMutate;\n  function addManyMutably(entities: any[], state: any): DidMutate {\n    let didMutate = false;\n\n    for (const entity of entities) {\n      didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n\n  function addAllMutably(entities: T[], state: R): DidMutate;\n  function addAllMutably(entities: any[], state: any): DidMutate {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n\n    return DidMutate.Both;\n  }\n\n  function removeOneMutably(key: T, state: R): DidMutate;\n  function removeOneMutably(key: any, state: any): DidMutate {\n    return removeManyMutably([key], state);\n  }\n\n  function removeManyMutably(keys: T[], state: R): DidMutate;\n  function removeManyMutably(keys: any[], state: any): DidMutate {\n    const didMutate =\n      keys\n        .filter(key => key in state.entities)\n        .map(key => delete state.entities[key]).length > 0;\n\n    if (didMutate) {\n      state.ids = state.ids.filter((id: any) => id in state.entities);\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n\n  function removeAll<S extends R>(state: S): S;\n  function removeAll<S extends R>(state: any): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n\n  function takeNewKey(\n    keys: { [id: string]: string },\n    update: Update<T>,\n    state: R\n  ): void;\n  function takeNewKey(\n    keys: { [id: string]: any },\n    update: Update<T>,\n    state: any\n  ): boolean {\n    const original = state.entities[update.id];\n    const updated: T = Object.assign({}, original, update.changes);\n    const newKey = selectId(updated);\n    const hasNewKey = newKey !== update.id;\n\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n\n    return hasNewKey;\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate;\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state);\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const newKeys: { [id: string]: string } = {};\n\n    updates = updates.filter(update => update.id in state.entities);\n\n    const didMutateEntities = updates.length > 0;\n\n    if (didMutateEntities) {\n      const didMutateIds =\n        updates.filter(update => takeNewKey(newKeys, update, state)).length > 0;\n\n      if (didMutateIds) {\n        state.ids = state.ids.map((id: any) => newKeys[id] || id);\n        return DidMutate.Both;\n      } else {\n        return DidMutate.EntitiesOnly;\n      }\n    }\n\n    return DidMutate.None;\n  }\n\n  function upsertOneMutably(update: Update<T>, state: R): DidMutate;\n  function upsertOneMutably(update: any, state: any): DidMutate {\n    return upsertManyMutably([update], state);\n  }\n\n  function upsertManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function upsertManyMutably(updates: any[], state: any): DidMutate {\n    const added: T[] = [];\n    const updated: any[] = [];\n\n    for (const update of updates) {\n      if (update.id in state.entities) {\n        updated.push(update);\n      } else {\n        added.push({\n          ...update.changes,\n          id: update.id,\n        });\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None &&\n        didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both ||\n        didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    addAll: createStateOperator(addAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n  };\n}\n","import { EntityState, EntityStateAdapter } from './models';\n\nexport enum DidMutate {\n  EntitiesOnly,\n  Both,\n  None,\n}\n\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => DidMutate\n): EntityState<V>;\nexport function createStateOperator<V, R>(\n  mutator: (arg: any, state: any) => DidMutate\n): any {\n  return function operation<S extends EntityState<V>>(arg: R, state: any): S {\n    const clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate === DidMutate.Both) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    if (didMutate === DidMutate.EntitiesOnly) {\n      return {\n        ...state,\n        entities: clonedEntityState.entities,\n      };\n    }\n\n    return state;\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport { EntityState, EntitySelectors, Dictionary } from './models';\n\nexport function createSelectorsFactory<T>() {\n  function getSelectors(): EntitySelectors<T, EntityState<T>>;\n  function getSelectors<V>(\n    selectState: (state: V) => EntityState<T>\n  ): EntitySelectors<T, V>;\n  function getSelectors(\n    selectState?: (state: any) => EntityState<T>\n  ): EntitySelectors<T, any> {\n    const selectIds = (state: any) => state.ids;\n    const selectEntities = (state: EntityState<T>) => state.entities;\n    const selectAll = createSelector(\n      selectIds,\n      selectEntities,\n      (ids: T[], entities: Dictionary<T>): any =>\n        ids.map((id: any) => (entities as any)[id])\n    );\n\n    const selectTotal = createSelector(selectIds, ids => ids.length);\n\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal,\n      };\n    }\n\n    return {\n      selectIds: createSelector(selectState, selectIds),\n      selectEntities: createSelector(selectState, selectEntities),\n      selectAll: createSelector(selectState, selectAll),\n      selectTotal: createSelector(selectState, selectTotal),\n    };\n  }\n\n  return { getSelectors };\n}\n","import { EntityState } from './models';\n\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n  function getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n"],"names":[],"mappings":"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"}