{"version":3,"file":"state_adapter.js","sourceRoot":"ng://@ngrx/entity/","sources":["src/state_adapter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAY,SAAS;IACnB,YAAY,GAAA;IACZ,IAAI,GAAA;IACJ,IAAI,GAAA;EACL;;;;;;;;;;AAKD,MAAM,UAAU,mBAAmB,CACjC,OAA4C;IAE5C;;;;;;IAAO,SAAS,SAAS,CAA2B,GAAM,EAAE,KAAU;;YAC9D,iBAAiB,GAAmB;YACxC,GAAG,WAAM,KAAK,CAAC,GAAG,CAAC;YACnB,QAAQ,eAAO,KAAK,CAAC,QAAQ,CAAE;SAChC;;YAEK,SAAS,GAAG,OAAO,CAAC,GAAG,EAAE,iBAAiB,CAAC;QAEjD,IAAI,SAAS,KAAK,SAAS,CAAC,IAAI,EAAE;YAChC,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,iBAAiB,CAAC,CAAC;SACpD;QAED,IAAI,SAAS,KAAK,SAAS,CAAC,YAAY,EAAE;YACxC,6BACK,KAAK,KACR,QAAQ,EAAE,iBAAiB,CAAC,QAAQ,IACpC;SACH;QAED,OAAO,KAAK,CAAC;IACf,CAAC,EAAC;AACJ,CAAC","sourcesContent":["import { EntityState } from './models';\n\nexport enum DidMutate {\n  EntitiesOnly,\n  Both,\n  None,\n}\n\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => DidMutate\n): EntityState<V>;\nexport function createStateOperator<V, R>(\n  mutator: (arg: any, state: any) => DidMutate\n): any {\n  return function operation<S extends EntityState<V>>(arg: R, state: any): S {\n    const clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate === DidMutate.Both) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    if (didMutate === DidMutate.EntitiesOnly) {\n      return {\n        ...state,\n        entities: clonedEntityState.entities,\n      };\n    }\n\n    return state;\n  };\n}\n"]}