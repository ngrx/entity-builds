{
  "version": 3,
  "sources": ["../../../../modules/entity/src/entity_state.ts", "../../../../modules/entity/src/state_selectors.ts", "../../../../modules/entity/src/state_adapter.ts", "../../../../modules/entity/src/utils.ts", "../../../../modules/entity/src/unsorted_state_adapter.ts", "../../../../modules/entity/src/sorted_state_adapter.ts", "../../../../modules/entity/src/create_adapter.ts", "../../../../modules/entity/src/models.ts"],
  "sourcesContent": ["import { EntityState } from './models';\n\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n  function getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n", "import { createSelector } from '@ngrx/store';\nimport {\n  EntityState,\n  EntitySelectors,\n  MemoizedEntitySelectors,\n} from './models';\n\nexport function createSelectorsFactory<T>() {\n  function getSelectors(): EntitySelectors<T, EntityState<T>>;\n  function getSelectors<V>(\n    selectState: (state: V) => EntityState<T>\n  ): MemoizedEntitySelectors<T, V>;\n  function getSelectors(\n    selectState?: (state: any) => EntityState<T>\n  ): EntitySelectors<T, any> {\n    const selectIds = (state: any) => state.ids;\n    const selectEntities = (state: EntityState<T>) => state.entities;\n    const selectAll = createSelector(\n      selectIds,\n      selectEntities,\n      (ids, entities): any => ids.map((id: any) => (entities as any)[id])\n    );\n\n    const selectTotal = createSelector(selectIds, (ids) => ids.length);\n\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal,\n      };\n    }\n\n    return {\n      selectIds: createSelector(selectState, selectIds),\n      selectEntities: createSelector(selectState, selectEntities),\n      selectAll: createSelector(selectState, selectAll),\n      selectTotal: createSelector(selectState, selectTotal),\n    };\n  }\n\n  return { getSelectors };\n}\n", "import { EntityState } from './models';\n\nexport enum DidMutate {\n  EntitiesOnly,\n  Both,\n  None,\n}\n\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => DidMutate\n): EntityState<V>;\nexport function createStateOperator<V, R>(\n  mutator: (arg: any, state: any) => DidMutate\n): any {\n  return function operation<S extends EntityState<V>>(arg: R, state: any): S {\n    const clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate === DidMutate.Both) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    if (didMutate === DidMutate.EntitiesOnly) {\n      return {\n        ...state,\n        entities: clonedEntityState.entities,\n      };\n    }\n\n    return state;\n  };\n}\n", "import { isDevMode } from '@angular/core';\nimport { IdSelector } from './models';\n\nexport function selectIdValue<T>(entity: T, selectId: IdSelector<T>) {\n  const key = selectId(entity);\n\n  if (isDevMode() && key === undefined) {\n    console.warn(\n      '@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.',\n      'You should probably provide your own `selectId` implementation.',\n      'The entity that was passed:',\n      entity,\n      'The `selectId` implementation:',\n      selectId.toString()\n    );\n  }\n\n  return key;\n}\n", "import {\n  EntityState,\n  EntityStateAdapter,\n  IdSelector,\n  Update,\n  Predicate,\n  EntityMap,\n  EntityMapOneNum,\n  EntityMapOneStr,\n} from './models';\nimport { createStateOperator, DidMutate } from './state_adapter';\nimport { selectIdValue } from './utils';\n\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T>;\nexport function createUnsortedStateAdapter<T>(selectId: IdSelector<T>): any {\n  type R = EntityState<T>;\n\n  function addOneMutably(entity: T, state: R): DidMutate;\n  function addOneMutably(entity: any, state: any): DidMutate {\n    const key = selectIdValue(entity, selectId);\n\n    if (key in state.entities) {\n      return DidMutate.None;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return DidMutate.Both;\n  }\n\n  function addManyMutably(entities: T[], state: R): DidMutate;\n  function addManyMutably(entities: any[], state: any): DidMutate {\n    let didMutate = false;\n\n    for (const entity of entities) {\n      didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n\n  function setAllMutably(entities: T[], state: R): DidMutate;\n  function setAllMutably(entities: any[], state: any): DidMutate {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n\n    return DidMutate.Both;\n  }\n\n  function setOneMutably(entity: T, state: R): DidMutate;\n  function setOneMutably(entity: any, state: any): DidMutate {\n    const key = selectIdValue(entity, selectId);\n\n    if (key in state.entities) {\n      state.entities[key] = entity;\n      return DidMutate.EntitiesOnly;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return DidMutate.Both;\n  }\n\n  function setManyMutably(entities: T[], state: R): DidMutate;\n  function setManyMutably(entities: any[], state: any): DidMutate {\n    const didMutateSetOne = entities.map((entity) =>\n      setOneMutably(entity, state)\n    );\n\n    switch (true) {\n      case didMutateSetOne.some((didMutate) => didMutate === DidMutate.Both):\n        return DidMutate.Both;\n      case didMutateSetOne.some(\n        (didMutate) => didMutate === DidMutate.EntitiesOnly\n      ):\n        return DidMutate.EntitiesOnly;\n      default:\n        return DidMutate.None;\n    }\n  }\n\n  function removeOneMutably(key: string | number, state: R): DidMutate;\n  function removeOneMutably(key: any, state: any): DidMutate {\n    return removeManyMutably([key], state);\n  }\n\n  function removeManyMutably(keys: string[] | number[], state: R): DidMutate;\n  function removeManyMutably(predicate: Predicate<T>, state: R): DidMutate;\n  function removeManyMutably(\n    keysOrPredicate: any[] | Predicate<T>,\n    state: any\n  ): DidMutate {\n    const keys =\n      keysOrPredicate instanceof Array\n        ? keysOrPredicate\n        : state.ids.filter((key: any) => keysOrPredicate(state.entities[key]));\n\n    const didMutate =\n      keys\n        .filter((key: any) => key in state.entities)\n        .map((key: any) => delete state.entities[key]).length > 0;\n\n    if (didMutate) {\n      state.ids = state.ids.filter((id: any) => id in state.entities);\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None;\n  }\n\n  function removeAll<S extends R>(state: S): S;\n  function removeAll<S extends R>(state: any): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n\n  function takeNewKey(\n    keys: { [id: string]: string },\n    update: Update<T>,\n    state: R\n  ): void;\n  function takeNewKey(\n    keys: { [id: string]: any },\n    update: Update<T>,\n    state: any\n  ): boolean {\n    const original = state.entities[update.id];\n    const updated: T = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n    const hasNewKey = newKey !== update.id;\n\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n\n    return hasNewKey;\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate;\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state);\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const newKeys: { [id: string]: string } = {};\n\n    updates = updates.filter((update) => update.id in state.entities);\n\n    const didMutateEntities = updates.length > 0;\n\n    if (didMutateEntities) {\n      const didMutateIds =\n        updates.filter((update) => takeNewKey(newKeys, update, state)).length >\n        0;\n\n      if (didMutateIds) {\n        state.ids = state.ids.map((id: any) => newKeys[id] || id);\n        return DidMutate.Both;\n      } else {\n        return DidMutate.EntitiesOnly;\n      }\n    }\n\n    return DidMutate.None;\n  }\n\n  function mapMutably(map: EntityMap<T>, state: R): DidMutate;\n  function mapMutably(map: any, state: any): DidMutate {\n    const changes: Update<T>[] = state.ids.reduce(\n      (changes: any[], id: string | number) => {\n        const change = map(state.entities[id]);\n        if (change !== state.entities[id]) {\n          changes.push({ id, changes: change });\n        }\n        return changes;\n      },\n      []\n    );\n    const updates = changes.filter(({ id }) => id in state.entities);\n\n    return updateManyMutably(updates, state);\n  }\n\n  function mapOneMutably(map: EntityMapOneNum<T>, state: R): DidMutate;\n  function mapOneMutably(map: EntityMapOneStr<T>, state: R): DidMutate;\n  function mapOneMutably({ map, id }: any, state: any): DidMutate {\n    const entity = state.entities[id];\n    if (!entity) {\n      return DidMutate.None;\n    }\n\n    const updatedEntity = map(entity);\n    return updateOneMutably(\n      {\n        id: id,\n        changes: updatedEntity,\n      },\n      state\n    );\n  }\n\n  function upsertOneMutably(entity: T, state: R): DidMutate;\n  function upsertOneMutably(entity: any, state: any): DidMutate {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(entities: T[], state: R): DidMutate;\n  function upsertManyMutably(entities: any[], state: any): DidMutate {\n    const added: any[] = [];\n    const updated: any[] = [];\n\n    for (const entity of entities) {\n      const id = selectIdValue(entity, selectId);\n      if (id in state.entities) {\n        updated.push({ id, changes: entity });\n      } else {\n        added.push(entity);\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None &&\n        didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both ||\n        didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n    map: createStateOperator(mapMutably),\n    mapOne: createStateOperator(mapOneMutably),\n  };\n}\n", "import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  EntityStateAdapter,\n  Update,\n  EntityMap,\n  EntityMapOneNum,\n  EntityMapOneStr,\n} from './models';\nimport { createStateOperator, DidMutate } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\nimport { selectIdValue } from './utils';\n\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T>;\nexport function createSortedStateAdapter<T>(selectId: any, sort: any): any {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } =\n    createUnsortedStateAdapter(selectId);\n\n  function addOneMutably(entity: T, state: R): DidMutate;\n  function addOneMutably(entity: any, state: any): DidMutate {\n    return addManyMutably([entity], state);\n  }\n\n  function addManyMutably(newModels: T[], state: R): DidMutate;\n  function addManyMutably(newModels: any[], state: any): DidMutate {\n    const models = newModels.filter(\n      (model) => !(selectIdValue(model, selectId) in state.entities)\n    );\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      merge(models, state);\n      return DidMutate.Both;\n    }\n  }\n\n  function setAllMutably(models: T[], state: R): DidMutate;\n  function setAllMutably(models: any[], state: any): DidMutate {\n    state.entities = {};\n    state.ids = [];\n\n    addManyMutably(models, state);\n\n    return DidMutate.Both;\n  }\n\n  function setOneMutably(entity: T, state: R): DidMutate;\n  function setOneMutably(entity: any, state: any): DidMutate {\n    const id = selectIdValue(entity, selectId);\n    if (id in state.entities) {\n      state.ids = state.ids.filter((val: string | number) => val !== id);\n      merge([entity], state);\n      return DidMutate.Both;\n    } else {\n      return addOneMutably(entity, state);\n    }\n  }\n\n  function setManyMutably(entities: T[], state: R): DidMutate;\n  function setManyMutably(entities: any[], state: any): DidMutate {\n    const didMutateSetOne = entities.map((entity) =>\n      setOneMutably(entity, state)\n    );\n\n    switch (true) {\n      case didMutateSetOne.some((didMutate) => didMutate === DidMutate.Both):\n        return DidMutate.Both;\n      case didMutateSetOne.some(\n        (didMutate) => didMutate === DidMutate.EntitiesOnly\n      ):\n        return DidMutate.EntitiesOnly;\n      default:\n        return DidMutate.None;\n    }\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate;\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state);\n  }\n\n  function takeUpdatedModel(models: T[], update: Update<T>, state: R): boolean;\n  function takeUpdatedModel(models: any[], update: any, state: any): boolean {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n\n    const original = state.entities[update.id];\n    const updated = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n\n    delete state.entities[update.id];\n\n    models.push(updated);\n\n    return newKey !== update.id;\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const models: T[] = [];\n\n    const didMutateIds =\n      updates.filter((update) => takeUpdatedModel(models, update, state))\n        .length > 0;\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      const originalIds = state.ids;\n      const updatedIndexes: any[] = [];\n      state.ids = state.ids.filter((id: any, index: number) => {\n        if (id in state.entities) {\n          return true;\n        } else {\n          updatedIndexes.push(index);\n          return false;\n        }\n      });\n\n      merge(models, state);\n\n      if (\n        !didMutateIds &&\n        updatedIndexes.every((i: number) => state.ids[i] === originalIds[i])\n      ) {\n        return DidMutate.EntitiesOnly;\n      } else {\n        return DidMutate.Both;\n      }\n    }\n  }\n\n  function mapMutably(map: EntityMap<T>, state: R): DidMutate;\n  function mapMutably(updatesOrMap: any, state: any): DidMutate {\n    const updates: Update<T>[] = state.ids.reduce(\n      (changes: any[], id: string | number) => {\n        const change = updatesOrMap(state.entities[id]);\n        if (change !== state.entities[id]) {\n          changes.push({ id, changes: change });\n        }\n        return changes;\n      },\n      []\n    );\n\n    return updateManyMutably(updates, state);\n  }\n\n  function mapOneMutably(map: EntityMapOneNum<T>, state: R): DidMutate;\n  function mapOneMutably(map: EntityMapOneStr<T>, state: R): DidMutate;\n  function mapOneMutably({ map, id }: any, state: any): DidMutate {\n    const entity = state.entities[id];\n    if (!entity) {\n      return DidMutate.None;\n    }\n\n    const updatedEntity = map(entity);\n    return updateOneMutably(\n      {\n        id: id,\n        changes: updatedEntity,\n      },\n      state\n    );\n  }\n\n  function upsertOneMutably(entity: T, state: R): DidMutate;\n  function upsertOneMutably(entity: any, state: any): DidMutate {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(entities: T[], state: R): DidMutate;\n  function upsertManyMutably(entities: any[], state: any): DidMutate {\n    const added: any[] = [];\n    const updated: any[] = [];\n\n    for (const entity of entities) {\n      const id = selectIdValue(entity, selectId);\n      if (id in state.entities) {\n        updated.push({ id, changes: entity });\n      } else {\n        added.push(entity);\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None &&\n        didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both ||\n        didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n\n  function merge(models: T[], state: R): void;\n  function merge(models: any[], state: any): void {\n    models.sort(sort);\n\n    const ids: any[] = [];\n\n    let i = 0;\n    let j = 0;\n\n    while (i < models.length && j < state.ids.length) {\n      const model = models[i];\n      const modelId = selectIdValue(model, selectId);\n      const entityId = state.ids[j];\n      const entity = state.entities[entityId];\n\n      if (sort(model, entity) <= 0) {\n        ids.push(modelId);\n        i++;\n      } else {\n        ids.push(entityId);\n        j++;\n      }\n    }\n\n    if (i < models.length) {\n      state.ids = ids.concat(models.slice(i).map(selectId));\n    } else {\n      state.ids = ids.concat(state.ids.slice(j));\n    }\n\n    models.forEach((model, i) => {\n      state.entities[selectId(model)] = model;\n    });\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setAll: createStateOperator(setAllMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    map: createStateOperator(mapMutably),\n    mapOne: createStateOperator(mapOneMutably),\n  };\n}\n", "import {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n\nexport function createEntityAdapter<T>(\n  options: {\n    selectId?: IdSelector<T>;\n    sortComparer?: false | Comparer<T>;\n  } = {}\n): EntityAdapter<T> {\n  const { selectId, sortComparer }: EntityDefinition<T> = {\n    selectId: options.selectId ?? ((entity: any) => entity.id),\n    sortComparer: options.sortComparer ?? false,\n  };\n\n  const stateFactory = createInitialStateFactory<T>();\n  const selectorsFactory = createSelectorsFactory<T>();\n  const stateAdapter = sortComparer\n    ? createSortedStateAdapter(selectId, sortComparer)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n", "import { MemoizedSelector } from '@ngrx/store';\n\nexport type Comparer<T> = (a: T, b: T) => number;\n\nexport type IdSelectorStr<T> = (model: T) => string;\nexport type IdSelectorNum<T> = (model: T) => number;\n\nexport type IdSelector<T> = IdSelectorStr<T> | IdSelectorNum<T>;\n\nexport interface DictionaryNum<T> {\n  [id: number]: T | undefined;\n}\n\nexport abstract class Dictionary<T> implements DictionaryNum<T> {\n  [id: string]: T | undefined;\n}\n\nexport interface UpdateStr<T> {\n  id: string;\n  changes: Partial<T>;\n}\n\nexport interface UpdateNum<T> {\n  id: number;\n  changes: Partial<T>;\n}\n\nexport type Update<T> = UpdateStr<T> | UpdateNum<T>;\n\nexport type Predicate<T> = (entity: T) => boolean;\n\nexport type EntityMap<T> = (entity: T) => T;\n\nexport interface EntityMapOneNum<T> {\n  id: number;\n  map: EntityMap<T>;\n}\n\nexport interface EntityMapOneStr<T> {\n  id: string;\n  map: EntityMap<T>;\n}\n\nexport type EntityMapOne<T> = EntityMapOneNum<T> | EntityMapOneStr<T>;\n\nexport interface EntityState<T> {\n  ids: string[] | number[];\n  entities: Dictionary<T>;\n}\n\nexport interface EntityDefinition<T> {\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n}\n\nexport interface EntityStateAdapter<T> {\n  addOne<S extends EntityState<T>>(entity: T, state: S): S;\n  addMany<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  setAll<S extends EntityState<T>>(entities: T[], state: S): S;\n  setOne<S extends EntityState<T>>(entity: T, state: S): S;\n  setMany<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  removeOne<S extends EntityState<T>>(key: string, state: S): S;\n  removeOne<S extends EntityState<T>>(key: number, state: S): S;\n\n  removeMany<S extends EntityState<T>>(keys: string[], state: S): S;\n  removeMany<S extends EntityState<T>>(keys: number[], state: S): S;\n  removeMany<S extends EntityState<T>>(predicate: Predicate<T>, state: S): S;\n\n  removeAll<S extends EntityState<T>>(state: S): S;\n\n  updateOne<S extends EntityState<T>>(update: Update<T>, state: S): S;\n  updateMany<S extends EntityState<T>>(updates: Update<T>[], state: S): S;\n\n  upsertOne<S extends EntityState<T>>(entity: T, state: S): S;\n  upsertMany<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  mapOne<S extends EntityState<T>>(map: EntityMapOne<T>, state: S): S;\n  map<S extends EntityState<T>>(map: EntityMap<T>, state: S): S;\n}\n\nexport type EntitySelectors<T, V> = {\n  selectIds: (state: V) => string[] | number[];\n  selectEntities: (state: V) => Dictionary<T>;\n  selectAll: (state: V) => T[];\n  selectTotal: (state: V) => number;\n};\n\nexport type MemoizedEntitySelectors<T, V> = {\n  selectIds: MemoizedSelector<\n    V,\n    string[] | number[],\n    (entityState: EntityState<T>) => string[] | number[]\n  >;\n  selectEntities: MemoizedSelector<\n    V,\n    Dictionary<T>,\n    (entityState: EntityState<T>) => Dictionary<T>\n  >;\n  selectAll: MemoizedSelector<V, T[], (entityState: EntityState<T>) => T[]>;\n  selectTotal: MemoizedSelector<\n    V,\n    number,\n    (entityState: EntityState<T>) => number\n  >;\n};\n\nexport interface EntityAdapter<T> extends EntityStateAdapter<T> {\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n  getInitialState(): EntityState<T>;\n  getInitialState<S extends object>(state: S): EntityState<T> & S;\n  getSelectors(): EntitySelectors<T, EntityState<T>>;\n  getSelectors<V>(\n    selectState: (state: V) => EntityState<T>\n  ): MemoizedEntitySelectors<T, V>;\n}\n"],
  "mappings": "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",
  "names": ["DidMutate", "changes", "i"]
}
