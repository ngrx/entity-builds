{"version":3,"file":"models.js","sourceRoot":"ng://@ngrx/entity/","sources":["src/models.ts"],"names":[],"mappings":";;;;;;;;;AAUA,mCAEC;;;;;AAED,MAAM,OAAgB,UAAU;CAE/B;;;;;AAED,+BAGC;;;IAFC,uBAAW;;IACX,4BAAoB;;;;;;AAGtB,+BAGC;;;IAFC,uBAAW;;IACX,4BAAoB;;;;;;AAStB,iCAGC;;;IAFC,0BAAyB;;IACzB,+BAAwB;;;;;;AAG1B,sCAGC;;;IAFC,oCAAwB;;IACxB,wCAAkC;;;;;;AAGpC,wCA0BC;;;;;;;;IAzBC,mEAAyD;;;;;;;IACzD,sEAA8D;;;;;;;;IAG9D,qEAA6D;;;;;;;IAE7D,qEAA6D;;;;;;;IAC7D,mEAAyD;;;;;;;IAEzD,mEAA8D;;;;;;;IAC9D,mEAA8D;;;;;;;IAE9D,qEAAkE;;;;;;;IAClE,qEAAkE;;;;;;;IAClE,0EAA2E;;;;;;IAE3E,8DAAiD;;;;;;;IAEjD,sEAAoE;;;;;;;IACpE,wEAAwE;;;;;;;IAExE,sEAA4D;;;;;;;IAC5D,yEAAiE;;;;;;;IAEjE,6DAA8D;;;;;;AAGhE,qCAKC;;;IAJC,oCAA6C;;IAC7C,yCAA4C;;IAC5C,oCAA6B;;IAC7B,sCAAkC;;;;;;AAGpC,mCASC;;;IARC,iCAAwB;;IACxB,qCAAkC;;;;IAClC,0DAAkC;;;;;;IAClC,+DAAgE;;;;IAChE,uDAAmD;;;;;;IACnD,kEAEyB","sourcesContent":["export type ComparerStr<T> = (a: T, b: T) => string;\nexport type ComparerNum<T> = (a: T, b: T) => number;\n\nexport type Comparer<T> = ComparerNum<T> | ComparerStr<T>;\n\nexport type IdSelectorStr<T> = (model: T) => string;\nexport type IdSelectorNum<T> = (model: T) => number;\n\nexport type IdSelector<T> = IdSelectorStr<T> | IdSelectorNum<T>;\n\nexport interface DictionaryNum<T> {\n  [id: number]: T | undefined;\n}\n\nexport abstract class Dictionary<T> implements DictionaryNum<T> {\n  [id: string]: T | undefined;\n}\n\nexport interface UpdateStr<T> {\n  id: string;\n  changes: Partial<T>;\n}\n\nexport interface UpdateNum<T> {\n  id: number;\n  changes: Partial<T>;\n}\n\nexport type Update<T> = UpdateStr<T> | UpdateNum<T>;\n\nexport type Predicate<T> = (entity: T) => boolean;\n\nexport type EntityMap<T> = (entity: T) => T;\n\nexport interface EntityState<T> {\n  ids: string[] | number[];\n  entities: Dictionary<T>;\n}\n\nexport interface EntityDefinition<T> {\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n}\n\nexport interface EntityStateAdapter<T> {\n  addOne<S extends EntityState<T>>(entity: T, state: S): S;\n  addMany<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  /** @deprecated addAll has been renamed. Use setAll instead. */\n  addAll<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  setAll<S extends EntityState<T>>(entities: T[], state: S): S;\n  setOne<S extends EntityState<T>>(entity: T, state: S): S;\n\n  removeOne<S extends EntityState<T>>(key: string, state: S): S;\n  removeOne<S extends EntityState<T>>(key: number, state: S): S;\n\n  removeMany<S extends EntityState<T>>(keys: string[], state: S): S;\n  removeMany<S extends EntityState<T>>(keys: number[], state: S): S;\n  removeMany<S extends EntityState<T>>(predicate: Predicate<T>, state: S): S;\n\n  removeAll<S extends EntityState<T>>(state: S): S;\n\n  updateOne<S extends EntityState<T>>(update: Update<T>, state: S): S;\n  updateMany<S extends EntityState<T>>(updates: Update<T>[], state: S): S;\n\n  upsertOne<S extends EntityState<T>>(entity: T, state: S): S;\n  upsertMany<S extends EntityState<T>>(entities: T[], state: S): S;\n\n  map<S extends EntityState<T>>(map: EntityMap<T>, state: S): S;\n}\n\nexport interface EntitySelectors<T, V> {\n  selectIds: (state: V) => string[] | number[];\n  selectEntities: (state: V) => Dictionary<T>;\n  selectAll: (state: V) => T[];\n  selectTotal: (state: V) => number;\n}\n\nexport interface EntityAdapter<T> extends EntityStateAdapter<T> {\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n  getInitialState(): EntityState<T>;\n  getInitialState<S extends object>(state: S): EntityState<T> & S;\n  getSelectors(): EntitySelectors<T, EntityState<T>>;\n  getSelectors<V>(\n    selectState: (state: V) => EntityState<T>\n  ): EntitySelectors<T, V>;\n}\n"]}