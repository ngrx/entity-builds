{"version":3,"file":"sorted_state_adapter.js","sourceRoot":"ng://@ngrx/entity/","sources":["src/sorted_state_adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  EntityStateAdapter,\n  Update,\n  EntityMap,\n} from './models';\nimport { createStateOperator, DidMutate } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\nimport { selectIdValue } from './utils';\n\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T>;\nexport function createSortedStateAdapter<T>(selectId: any, sort: any): any {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n\n  function addOneMutably(entity: T, state: R): DidMutate;\n  function addOneMutably(entity: any, state: any): DidMutate {\n    return addManyMutably([entity], state);\n  }\n\n  function addManyMutably(newModels: T[], state: R): DidMutate;\n  function addManyMutably(newModels: any[], state: any): DidMutate {\n    const models = newModels.filter(\n      model => !(selectIdValue(model, selectId) in state.entities)\n    );\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      merge(models, state);\n      return DidMutate.Both;\n    }\n  }\n\n  function setAllMutably(models: T[], state: R): DidMutate;\n  function setAllMutably(models: any[], state: any): DidMutate {\n    state.entities = {};\n    state.ids = [];\n\n    addManyMutably(models, state);\n\n    return DidMutate.Both;\n  }\n\n  function setOneMutably(entity: T, state: R): DidMutate;\n  function setOneMutably(entity: any, state: any): DidMutate {\n    const id = selectIdValue(entity, selectId);\n    if (id in state.entities) {\n      state.ids = state.ids.filter((val: string | number) => val !== id);\n      merge([entity], state);\n      return DidMutate.Both;\n    } else {\n      return addOneMutably(entity, state);\n    }\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate;\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state);\n  }\n\n  function takeUpdatedModel(models: T[], update: Update<T>, state: R): boolean;\n  function takeUpdatedModel(models: any[], update: any, state: any): boolean {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n\n    const original = state.entities[update.id];\n    const updated = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n\n    delete state.entities[update.id];\n\n    models.push(updated);\n\n    return newKey !== update.id;\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate;\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const models: T[] = [];\n\n    const didMutateIds =\n      updates.filter(update => takeUpdatedModel(models, update, state)).length >\n      0;\n\n    if (models.length === 0) {\n      return DidMutate.None;\n    } else {\n      const originalIds = state.ids;\n      const updatedIndexes: any[] = [];\n      state.ids = state.ids.filter((id: any, index: number) => {\n        if (id in state.entities) {\n          return true;\n        } else {\n          updatedIndexes.push(index);\n          return false;\n        }\n      });\n\n      merge(models, state);\n\n      if (\n        !didMutateIds &&\n        updatedIndexes.every((i: number) => state.ids[i] === originalIds[i])\n      ) {\n        return DidMutate.EntitiesOnly;\n      } else {\n        return DidMutate.Both;\n      }\n    }\n  }\n\n  function mapMutably(map: EntityMap<T>, state: R): DidMutate;\n  function mapMutably(updatesOrMap: any, state: any): DidMutate {\n    const updates: Update<T>[] = state.ids.reduce(\n      (changes: any[], id: string | number) => {\n        const change = updatesOrMap(state.entities[id]);\n        if (change !== state.entities[id]) {\n          changes.push({ id, changes: change });\n        }\n        return changes;\n      },\n      []\n    );\n\n    return updateManyMutably(updates, state);\n  }\n\n  function upsertOneMutably(entity: T, state: R): DidMutate;\n  function upsertOneMutably(entity: any, state: any): DidMutate {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(entities: T[], state: R): DidMutate;\n  function upsertManyMutably(entities: any[], state: any): DidMutate {\n    const added: any[] = [];\n    const updated: any[] = [];\n\n    for (const entity of entities) {\n      const id = selectIdValue(entity, selectId);\n      if (id in state.entities) {\n        updated.push({ id, changes: entity });\n      } else {\n        added.push(entity);\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state);\n    const didMutateByAdded = addManyMutably(added, state);\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None &&\n        didMutateByUpdated === DidMutate.None:\n        return DidMutate.None;\n      case didMutateByAdded === DidMutate.Both ||\n        didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both;\n      default:\n        return DidMutate.EntitiesOnly;\n    }\n  }\n\n  function merge(models: T[], state: R): void;\n  function merge(models: any[], state: any): void {\n    models.sort(sort);\n\n    const ids: any[] = [];\n\n    let i = 0;\n    let j = 0;\n\n    while (i < models.length && j < state.ids.length) {\n      const model = models[i];\n      const modelId = selectIdValue(model, selectId);\n      const entityId = state.ids[j];\n      const entity = state.entities[entityId];\n\n      if (sort(model, entity) <= 0) {\n        ids.push(modelId);\n        i++;\n      } else {\n        ids.push(entityId);\n        j++;\n      }\n    }\n\n    if (i < models.length) {\n      state.ids = ids.concat(models.slice(i).map(selectId));\n    } else {\n      state.ids = ids.concat(state.ids.slice(j));\n    }\n\n    models.forEach((model, i) => {\n      state.entities[selectId(model)] = model;\n    });\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    addAll: createStateOperator(setAllMutably),\n    setAll: createStateOperator(setAllMutably),\n    setOne: createStateOperator(setOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    map: createStateOperator(mapMutably),\n  };\n}\n"]}